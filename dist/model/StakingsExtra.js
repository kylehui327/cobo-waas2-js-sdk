"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _BabylonStakingExtra = _interopRequireDefault(require("./BabylonStakingExtra"));
var _CoreStakingExtra = _interopRequireDefault(require("./CoreStakingExtra"));
var _EthStakingExtra = _interopRequireDefault(require("./EthStakingExtra"));
var _EthStakingExtraAllOfBeaconValidators = _interopRequireDefault(require("./EthStakingExtraAllOfBeaconValidators"));
var _StakingPoolType = _interopRequireDefault(require("./StakingPoolType"));
var _StakingsExtra;
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The StakingsExtra model module.
 * @module model/StakingsExtra
 */
var StakingsExtra = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>StakingsExtra</code>.
   * @alias module:model/StakingsExtra
   * @param {(module:model/BabylonStakingExtra|module:model/CoreStakingExtra|module:model/EthStakingExtra)} instance The actual instance to initialize StakingsExtra.
   */
  function StakingsExtra() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _classCallCheck(this, StakingsExtra);
    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    _defineProperty(this, "toJSON", function () {
      return this.getActualInstance();
    });
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    var discriminatorValue = instance["pool_type"];
    if (discriminatorValue) {
      switch (discriminatorValue) {
        case "Babylon":
          this.actualInstance = _BabylonStakingExtra["default"].constructFromObject(instance);
          match++;
          break;
        case "CoreBTC":
          this.actualInstance = _CoreStakingExtra["default"].constructFromObject(instance);
          match++;
          break;
        case "ETHBeacon":
          this.actualInstance = _EthStakingExtra["default"].constructFromObject(instance);
          match++;
          break;
        default:
          errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
          break;
      }
      return;
    }
    try {
      if (instance instanceof _BabylonStakingExtra["default"]) {
        this.actualInstance = instance;
      } else if (!!_BabylonStakingExtra["default"].validateJSON && _BabylonStakingExtra["default"].validateJSON(instance)) {
        // plain JS object
        // create BabylonStakingExtra from JS object
        this.actualInstance = _BabylonStakingExtra["default"].constructFromObject(instance);
      } else {
        if (_BabylonStakingExtra["default"].constructFromObject(instance)) {
          if (!!_BabylonStakingExtra["default"].constructFromObject(instance).toJSON) {
            if (_BabylonStakingExtra["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _BabylonStakingExtra["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _BabylonStakingExtra["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into BabylonStakingExtra
      errorMessages.push("Failed to construct BabylonStakingExtra: " + err);
    }
    try {
      if (instance instanceof _EthStakingExtra["default"]) {
        this.actualInstance = instance;
      } else if (!!_EthStakingExtra["default"].validateJSON && _EthStakingExtra["default"].validateJSON(instance)) {
        // plain JS object
        // create EthStakingExtra from JS object
        this.actualInstance = _EthStakingExtra["default"].constructFromObject(instance);
      } else {
        if (_EthStakingExtra["default"].constructFromObject(instance)) {
          if (!!_EthStakingExtra["default"].constructFromObject(instance).toJSON) {
            if (_EthStakingExtra["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _EthStakingExtra["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _EthStakingExtra["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into EthStakingExtra
      errorMessages.push("Failed to construct EthStakingExtra: " + err);
    }
    try {
      if (instance instanceof _CoreStakingExtra["default"]) {
        this.actualInstance = instance;
      } else if (!!_CoreStakingExtra["default"].validateJSON && _CoreStakingExtra["default"].validateJSON(instance)) {
        // plain JS object
        // create CoreStakingExtra from JS object
        this.actualInstance = _CoreStakingExtra["default"].constructFromObject(instance);
      } else {
        if (_CoreStakingExtra["default"].constructFromObject(instance)) {
          if (!!_CoreStakingExtra["default"].constructFromObject(instance).toJSON) {
            if (_CoreStakingExtra["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _CoreStakingExtra["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _CoreStakingExtra["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into CoreStakingExtra
      errorMessages.push("Failed to construct CoreStakingExtra: " + err);
    }

    // if (match > 1) {
    //    throw new Error("Multiple matches found constructing `StakingsExtra` with oneOf schemas BabylonStakingExtra, CoreStakingExtra, EthStakingExtra. Input: " + JSON.stringify(instance));
    // } else
    if (match === 0) {
      //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
      //    throw new Error("No match found constructing `StakingsExtra` with oneOf schemas BabylonStakingExtra, CoreStakingExtra, EthStakingExtra. Details: " +
      //                    errorMessages.join(", "));
      return;
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>StakingsExtra</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StakingsExtra} obj Optional instance to populate.
   * @return {module:model/StakingsExtra} The populated <code>StakingsExtra</code> instance.
   */
  return _createClass(StakingsExtra, [{
    key: "getActualInstance",
    value:
    /**
     * Gets the actual instance, which can be <code>BabylonStakingExtra</code>, <code>CoreStakingExtra</code>, <code>EthStakingExtra</code>.
     * @return {(module:model/BabylonStakingExtra|module:model/CoreStakingExtra|module:model/EthStakingExtra)} The actual instance.
     */
    function getActualInstance() {
      return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BabylonStakingExtra</code>, <code>CoreStakingExtra</code>, <code>EthStakingExtra</code>.
     * @param {(module:model/BabylonStakingExtra|module:model/CoreStakingExtra|module:model/EthStakingExtra)} obj The actual instance.
     */
  }, {
    key: "setActualInstance",
    value: function setActualInstance(obj) {
      this.actualInstance = StakingsExtra.constructFromObject(obj).getActualInstance();
    }
  }], [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      return new StakingsExtra(data);
    }
  }]);
}();
/**
 * @member {module:model/StakingPoolType} pool_type
 */
_StakingsExtra = StakingsExtra;
/**
 * Create an instance of StakingsExtra from a JSON string.
 * @param {string} json_string JSON string.
 * @return {module:model/StakingsExtra} An instance of StakingsExtra.
 */
_defineProperty(StakingsExtra, "fromJSON", function (json_string) {
  return _StakingsExtra.constructFromObject(JSON.parse(json_string));
});
StakingsExtra.prototype['pool_type'] = undefined;

/**
 * The Proof-of-Stake (PoS) chain.
 * @member {String} pos_chain
 */
StakingsExtra.prototype['pos_chain'] = undefined;

/**
 * The estimated time when the bitcoins will be unlocked, in Unix timestamp format, measured in milliseconds.
 * @member {Number} unlock_timestamp
 */
StakingsExtra.prototype['unlock_timestamp'] = undefined;

/**
 * The block height at which the bitcoins will be unlocked.
 * @member {Number} unlock_block_height
 */
StakingsExtra.prototype['unlock_block_height'] = undefined;

/**
 * The address receiving the staked bitcoins.
 * @member {String} stake_address
 */
StakingsExtra.prototype['stake_address'] = undefined;

/**
 * The address receiving the unlocked bitcoins.
 * @member {String} unbond_address
 */
StakingsExtra.prototype['unbond_address'] = undefined;

/**
 * The list of validator information.
 * @member {Array.<module:model/EthStakingExtraAllOfBeaconValidators>} beacon_validators
 */
StakingsExtra.prototype['beacon_validators'] = undefined;

/**
 * The staker's Bitcoin address.
 * @member {String} staker_address
 */
StakingsExtra.prototype['staker_address'] = undefined;

/**
 * The validator's EVM address.
 * @member {String} validator_address
 */
StakingsExtra.prototype['validator_address'] = undefined;

/**
 * The EVM address to receive staking rewards.
 * @member {String} reward_address
 */
StakingsExtra.prototype['reward_address'] = undefined;

/**
 * The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
 * @member {Number} timelock
 */
StakingsExtra.prototype['timelock'] = undefined;
StakingsExtra.OneOf = ["BabylonStakingExtra", "CoreStakingExtra", "EthStakingExtra"];
var _default = exports["default"] = StakingsExtra;