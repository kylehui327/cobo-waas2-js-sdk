"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _FeeType = _interopRequireDefault(require("./FeeType"));
var _TransactionEvmEip1559Fee = _interopRequireDefault(require("./TransactionEvmEip1559Fee"));
var _TransactionEvmLegacyFee = _interopRequireDefault(require("./TransactionEvmLegacyFee"));
var _TransactionFILFee = _interopRequireDefault(require("./TransactionFILFee"));
var _TransactionFixedFee = _interopRequireDefault(require("./TransactionFixedFee"));
var _TransactionSOLFee = _interopRequireDefault(require("./TransactionSOLFee"));
var _TransactionUtxoFee = _interopRequireDefault(require("./TransactionUtxoFee"));
var _TransactionFee;
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TransactionFee model module.
 * @module model/TransactionFee
 */
var TransactionFee = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TransactionFee</code>.
   * @alias module:model/TransactionFee
   * @param {(module:model/TransactionEvmEip1559Fee|module:model/TransactionEvmLegacyFee|module:model/TransactionFILFee|module:model/TransactionFixedFee|module:model/TransactionSOLFee|module:model/TransactionUtxoFee)} instance The actual instance to initialize TransactionFee.
   */
  function TransactionFee() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _classCallCheck(this, TransactionFee);
    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    _defineProperty(this, "toJSON", function () {
      return this.getActualInstance();
    });
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    var discriminatorValue = instance["fee_type"];
    if (discriminatorValue) {
      switch (discriminatorValue) {
        case "EVM_EIP_1559":
          this.actualInstance = _TransactionEvmEip1559Fee["default"].constructFromObject(instance);
          match++;
          break;
        case "EVM_Legacy":
          this.actualInstance = _TransactionEvmLegacyFee["default"].constructFromObject(instance);
          match++;
          break;
        case "FIL":
          this.actualInstance = _TransactionFILFee["default"].constructFromObject(instance);
          match++;
          break;
        case "Fixed":
          this.actualInstance = _TransactionFixedFee["default"].constructFromObject(instance);
          match++;
          break;
        case "SOL":
          this.actualInstance = _TransactionSOLFee["default"].constructFromObject(instance);
          match++;
          break;
        case "UTXO":
          this.actualInstance = _TransactionUtxoFee["default"].constructFromObject(instance);
          match++;
          break;
        default:
          errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
          break;
      }
      return;
    }
    try {
      if (instance instanceof _TransactionEvmEip1559Fee["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionEvmEip1559Fee["default"].validateJSON && _TransactionEvmEip1559Fee["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionEvmEip1559Fee from JS object
        this.actualInstance = _TransactionEvmEip1559Fee["default"].constructFromObject(instance);
      } else {
        if (_TransactionEvmEip1559Fee["default"].constructFromObject(instance)) {
          if (!!_TransactionEvmEip1559Fee["default"].constructFromObject(instance).toJSON) {
            if (_TransactionEvmEip1559Fee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionEvmEip1559Fee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionEvmEip1559Fee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionEvmEip1559Fee
      errorMessages.push("Failed to construct TransactionEvmEip1559Fee: " + err);
    }
    try {
      if (instance instanceof _TransactionEvmLegacyFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionEvmLegacyFee["default"].validateJSON && _TransactionEvmLegacyFee["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionEvmLegacyFee from JS object
        this.actualInstance = _TransactionEvmLegacyFee["default"].constructFromObject(instance);
      } else {
        if (_TransactionEvmLegacyFee["default"].constructFromObject(instance)) {
          if (!!_TransactionEvmLegacyFee["default"].constructFromObject(instance).toJSON) {
            if (_TransactionEvmLegacyFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionEvmLegacyFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionEvmLegacyFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionEvmLegacyFee
      errorMessages.push("Failed to construct TransactionEvmLegacyFee: " + err);
    }
    try {
      if (instance instanceof _TransactionUtxoFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionUtxoFee["default"].validateJSON && _TransactionUtxoFee["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionUtxoFee from JS object
        this.actualInstance = _TransactionUtxoFee["default"].constructFromObject(instance);
      } else {
        if (_TransactionUtxoFee["default"].constructFromObject(instance)) {
          if (!!_TransactionUtxoFee["default"].constructFromObject(instance).toJSON) {
            if (_TransactionUtxoFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionUtxoFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionUtxoFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionUtxoFee
      errorMessages.push("Failed to construct TransactionUtxoFee: " + err);
    }
    try {
      if (instance instanceof _TransactionFixedFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionFixedFee["default"].validateJSON && _TransactionFixedFee["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionFixedFee from JS object
        this.actualInstance = _TransactionFixedFee["default"].constructFromObject(instance);
      } else {
        if (_TransactionFixedFee["default"].constructFromObject(instance)) {
          if (!!_TransactionFixedFee["default"].constructFromObject(instance).toJSON) {
            if (_TransactionFixedFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionFixedFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionFixedFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionFixedFee
      errorMessages.push("Failed to construct TransactionFixedFee: " + err);
    }
    try {
      if (instance instanceof _TransactionSOLFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionSOLFee["default"].validateJSON && _TransactionSOLFee["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionSOLFee from JS object
        this.actualInstance = _TransactionSOLFee["default"].constructFromObject(instance);
      } else {
        if (_TransactionSOLFee["default"].constructFromObject(instance)) {
          if (!!_TransactionSOLFee["default"].constructFromObject(instance).toJSON) {
            if (_TransactionSOLFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionSOLFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionSOLFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionSOLFee
      errorMessages.push("Failed to construct TransactionSOLFee: " + err);
    }
    try {
      if (instance instanceof _TransactionFILFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionFILFee["default"].validateJSON && _TransactionFILFee["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionFILFee from JS object
        this.actualInstance = _TransactionFILFee["default"].constructFromObject(instance);
      } else {
        if (_TransactionFILFee["default"].constructFromObject(instance)) {
          if (!!_TransactionFILFee["default"].constructFromObject(instance).toJSON) {
            if (_TransactionFILFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionFILFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionFILFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionFILFee
      errorMessages.push("Failed to construct TransactionFILFee: " + err);
    }

    // if (match > 1) {
    //    throw new Error("Multiple matches found constructing `TransactionFee` with oneOf schemas TransactionEvmEip1559Fee, TransactionEvmLegacyFee, TransactionFILFee, TransactionFixedFee, TransactionSOLFee, TransactionUtxoFee. Input: " + JSON.stringify(instance));
    // } else
    if (match === 0) {
      //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
      //    throw new Error("No match found constructing `TransactionFee` with oneOf schemas TransactionEvmEip1559Fee, TransactionEvmLegacyFee, TransactionFILFee, TransactionFixedFee, TransactionSOLFee, TransactionUtxoFee. Details: " +
      //                    errorMessages.join(", "));
      return;
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>TransactionFee</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionFee} obj Optional instance to populate.
   * @return {module:model/TransactionFee} The populated <code>TransactionFee</code> instance.
   */
  return _createClass(TransactionFee, [{
    key: "getActualInstance",
    value:
    /**
     * Gets the actual instance, which can be <code>TransactionEvmEip1559Fee</code>, <code>TransactionEvmLegacyFee</code>, <code>TransactionFILFee</code>, <code>TransactionFixedFee</code>, <code>TransactionSOLFee</code>, <code>TransactionUtxoFee</code>.
     * @return {(module:model/TransactionEvmEip1559Fee|module:model/TransactionEvmLegacyFee|module:model/TransactionFILFee|module:model/TransactionFixedFee|module:model/TransactionSOLFee|module:model/TransactionUtxoFee)} The actual instance.
     */
    function getActualInstance() {
      return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionEvmEip1559Fee</code>, <code>TransactionEvmLegacyFee</code>, <code>TransactionFILFee</code>, <code>TransactionFixedFee</code>, <code>TransactionSOLFee</code>, <code>TransactionUtxoFee</code>.
     * @param {(module:model/TransactionEvmEip1559Fee|module:model/TransactionEvmLegacyFee|module:model/TransactionFILFee|module:model/TransactionFixedFee|module:model/TransactionSOLFee|module:model/TransactionUtxoFee)} obj The actual instance.
     */
  }, {
    key: "setActualInstance",
    value: function setActualInstance(obj) {
      this.actualInstance = TransactionFee.constructFromObject(obj).getActualInstance();
    }
  }], [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      return new TransactionFee(data);
    }
  }]);
}();
/**
 * @member {module:model/FeeType} fee_type
 */
_TransactionFee = TransactionFee;
/**
 * Create an instance of TransactionFee from a JSON string.
 * @param {string} json_string JSON string.
 * @return {module:model/TransactionFee} An instance of TransactionFee.
 */
_defineProperty(TransactionFee, "fromJSON", function (json_string) {
  return _TransactionFee.constructFromObject(JSON.parse(json_string));
});
TransactionFee.prototype['fee_type'] = undefined;

/**
 * The token used to pay the transaction fee.
 * @member {String} token_id
 */
TransactionFee.prototype['token_id'] = undefined;

/**
 * The gas price (gas fee per gas unit) on the chain, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.
 * @member {String} effective_gas_price
 */
TransactionFee.prototype['effective_gas_price'] = undefined;

/**
 * The actually charged transaction fee.
 * @member {String} fee_used
 */
TransactionFee.prototype['fee_used'] = undefined;

/**
 * The estimated transaction fee.
 * @member {String} estimated_fee_used
 */
TransactionFee.prototype['estimated_fee_used'] = undefined;

/**
 * The gas units used in the transaction.
 * @member {String} gas_used
 */
TransactionFee.prototype['gas_used'] = undefined;

/**
 * The maximum gas fee per gas unit used on the chain, in wei.
 * @member {String} max_fee_per_gas
 */
TransactionFee.prototype['max_fee_per_gas'] = undefined;

/**
 * The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
 * @member {String} max_priority_fee_per_gas
 */
TransactionFee.prototype['max_priority_fee_per_gas'] = undefined;

/**
 * The maximum amount of gas your transaction is allowed to consume.
 * @member {String} gas_limit
 */
TransactionFee.prototype['gas_limit'] = undefined;

/**
 * The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions per gas unit used.
 * @member {String} gas_price
 */
TransactionFee.prototype['gas_price'] = undefined;

/**
 * The maximum fee that you are willing to pay for the transaction. Provide the value without applying precision. The transaction will fail if the transaction fee exceeds the maximum fee.
 * @member {String} max_fee_amount
 */
TransactionFee.prototype['max_fee_amount'] = undefined;

/**
 * The fee rate in sat/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
 * @member {String} fee_rate
 */
TransactionFee.prototype['fee_rate'] = undefined;

/**
 * A fixed fee charged per signature. The default is 5,000 lamports per signature.
 * @member {String} base_fee
 */
TransactionFee.prototype['base_fee'] = undefined;

/**
 * The rent fee charged by the network to store non–rent-exempt accounts on-chain. It is deducted periodically until the account maintains the minimum balance required for rent exemption.
 * @member {String} rent_amount
 */
TransactionFee.prototype['rent_amount'] = undefined;

/**
 * The price paid per compute unit. This value determines the priority fee for the transaction, allowing you to increase inclusion probability in congested conditions.
 * @member {String} compute_unit_price
 */
TransactionFee.prototype['compute_unit_price'] = undefined;

/**
 * The maximum number of compute units your transaction is allowed to consume. It sets an upper bound on computational resource usage to prevent overload.
 * @member {String} compute_unit_limit
 */
TransactionFee.prototype['compute_unit_limit'] = undefined;

/**
 * The minimum fee required for a transaction to be included in a block. The base fee is dynamically adjusted based on network congestion to maintain target block utilization. It is burned rather than paid to miners, reducing the total Filecoin supply over time.
 * @member {String} gas_base
 */
TransactionFee.prototype['gas_base'] = undefined;

/**
 * An optional tip you can include to prioritize your transaction. The gas premium incentivizes miners to include your transaction sooner than those offering only the base fee.
 * @member {String} gas_premium
 */
TransactionFee.prototype['gas_premium'] = undefined;

/**
 * The maximum gas price you are willing to pay per unit of gas.
 * @member {String} gas_fee_cap
 */
TransactionFee.prototype['gas_fee_cap'] = undefined;
TransactionFee.OneOf = ["TransactionEvmEip1559Fee", "TransactionEvmLegacyFee", "TransactionFILFee", "TransactionFixedFee", "TransactionSOLFee", "TransactionUtxoFee"];
var _default = exports["default"] = TransactionFee;