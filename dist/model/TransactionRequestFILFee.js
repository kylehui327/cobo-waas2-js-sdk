"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _FILPrice = _interopRequireDefault(require("./FILPrice"));
var _FeeType = _interopRequireDefault(require("./FeeType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TransactionRequestFILFee model module.
 * @module model/TransactionRequestFILFee
 */
var TransactionRequestFILFee = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TransactionRequestFILFee</code>.
   * The preset properties to limit transaction fee.  In the Filecoin fee model, the transaction fee is calculated using the minimum of your specified gas fee cap and the sum of the base fee and gas premium, then multiplied by the gas limit. This can be expressed as: Transaction fee &#x3D; min(gas fee cap, base fee + gas premium) * gas limit. For more information about the Filecoin fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).  You can specify the gas fee cap, gas premium, and gas limit to control fee behavior and prioritization.  Switch between the tabs to display the properties for different transaction fee models. 
   * @alias module:model/TransactionRequestFILFee
   * @implements module:model/FILPrice
   * @param gas_premium {String} An optional tip you can include to prioritize your transaction. The gas premium incentivizes miners to include your transaction sooner than those offering only the base fee.
   * @param gas_fee_cap {String} The maximum gas price you are willing to pay per unit of gas.
   * @param fee_type {module:model/FeeType} 
   * @param token_id {String} The token used to pay the transaction fee.
   */
  function TransactionRequestFILFee(gas_premium, gas_fee_cap, fee_type, token_id) {
    _classCallCheck(this, TransactionRequestFILFee);
    _FILPrice["default"].initialize(this);
    TransactionRequestFILFee.initialize(this, gas_premium, gas_fee_cap, fee_type, token_id);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(TransactionRequestFILFee, null, [{
    key: "initialize",
    value: function initialize(obj, gas_premium, gas_fee_cap, fee_type, token_id) {
      obj['gas_premium'] = gas_premium;
      obj['gas_fee_cap'] = gas_fee_cap;
      obj['fee_type'] = fee_type;
      obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>TransactionRequestFILFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionRequestFILFee} obj Optional instance to populate.
     * @return {module:model/TransactionRequestFILFee} The populated <code>TransactionRequestFILFee</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TransactionRequestFILFee();
        _FILPrice["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('gas_premium')) {
          obj['gas_premium'] = _ApiClient["default"].convertToType(data['gas_premium'], 'String');
        }
        if (data.hasOwnProperty('gas_fee_cap')) {
          obj['gas_fee_cap'] = _ApiClient["default"].convertToType(data['gas_fee_cap'], 'String');
        }
        if (data.hasOwnProperty('gas_limit')) {
          obj['gas_limit'] = _ApiClient["default"].convertToType(data['gas_limit'], 'String');
        }
        if (data.hasOwnProperty('fee_type')) {
          obj['fee_type'] = _FeeType["default"].constructFromObject(data['fee_type']);
        }
        if (data.hasOwnProperty('token_id')) {
          obj['token_id'] = _ApiClient["default"].convertToType(data['token_id'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionRequestFILFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionRequestFILFee</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(TransactionRequestFILFee.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['gas_premium'] && !(typeof data['gas_premium'] === 'string' || data['gas_premium'] instanceof String)) {
        throw new Error("Expected the field `gas_premium` to be a primitive type in the JSON string but got " + data['gas_premium']);
      }
      // ensure the json data is a string
      if (data['gas_fee_cap'] && !(typeof data['gas_fee_cap'] === 'string' || data['gas_fee_cap'] instanceof String)) {
        throw new Error("Expected the field `gas_fee_cap` to be a primitive type in the JSON string but got " + data['gas_fee_cap']);
      }
      // ensure the json data is a string
      if (data['gas_limit'] && !(typeof data['gas_limit'] === 'string' || data['gas_limit'] instanceof String)) {
        throw new Error("Expected the field `gas_limit` to be a primitive type in the JSON string but got " + data['gas_limit']);
      }
      // ensure the json data is a string
      if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
        throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
      }
      return true;
    }
  }]);
}();
TransactionRequestFILFee.RequiredProperties = ["gas_premium", "gas_fee_cap", "fee_type", "token_id"];

/**
 * An optional tip you can include to prioritize your transaction. The gas premium incentivizes miners to include your transaction sooner than those offering only the base fee.
 * @member {String} gas_premium
 */
TransactionRequestFILFee.prototype['gas_premium'] = undefined;

/**
 * The maximum gas price you are willing to pay per unit of gas.
 * @member {String} gas_fee_cap
 */
TransactionRequestFILFee.prototype['gas_fee_cap'] = undefined;

/**
 * The maximum amount of gas your transaction is allowed to consume.
 * @member {String} gas_limit
 */
TransactionRequestFILFee.prototype['gas_limit'] = undefined;

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionRequestFILFee.prototype['fee_type'] = undefined;

/**
 * The token used to pay the transaction fee.
 * @member {String} token_id
 */
TransactionRequestFILFee.prototype['token_id'] = undefined;

// Implement FILPrice interface:
/**
 * An optional tip you can include to prioritize your transaction. The gas premium incentivizes miners to include your transaction sooner than those offering only the base fee.
 * @member {String} gas_premium
 */
_FILPrice["default"].prototype['gas_premium'] = undefined;
/**
 * The maximum gas price you are willing to pay per unit of gas.
 * @member {String} gas_fee_cap
 */
_FILPrice["default"].prototype['gas_fee_cap'] = undefined;
/**
 * The maximum amount of gas your transaction is allowed to consume.
 * @member {String} gas_limit
 */
_FILPrice["default"].prototype['gas_limit'] = undefined;
var _default = exports["default"] = TransactionRequestFILFee;