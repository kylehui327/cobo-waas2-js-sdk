"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _FeeType = _interopRequireDefault(require("./FeeType"));
var _SOLComputeUnit = _interopRequireDefault(require("./SOLComputeUnit"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TransactionRequestSOLFee model module.
 * @module model/TransactionRequestSOLFee
 */
var TransactionRequestSOLFee = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TransactionRequestSOLFee</code>.
   * The preset properties to limit transaction fee.  In the Solana fee model, the transaction fee is calculated by adding the base fee to the product of the compute unit limit and the compute unit price. This can be expressed as: Transaction fee &#x3D; base fee + (CU limit * CU price). For more information about the Solana fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).  You can specify CU price and CU limit to adjust the priority and resource allocation of your transaction.  Switch between the tabs to display the properties for different transaction fee models. 
   * @alias module:model/TransactionRequestSOLFee
   * @implements module:model/SOLComputeUnit
   * @param compute_unit_price {String} The price paid per compute unit. This value determines the priority fee for the transaction, allowing you to increase inclusion probability in congested conditions.
   * @param compute_unit_limit {String} The maximum number of compute units your transaction is allowed to consume. It sets an upper bound on computational resource usage to prevent overload.
   * @param fee_type {module:model/FeeType} 
   * @param token_id {String} The token used to pay the transaction fee.
   */
  function TransactionRequestSOLFee(compute_unit_price, compute_unit_limit, fee_type, token_id) {
    _classCallCheck(this, TransactionRequestSOLFee);
    _SOLComputeUnit["default"].initialize(this);
    TransactionRequestSOLFee.initialize(this, compute_unit_price, compute_unit_limit, fee_type, token_id);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(TransactionRequestSOLFee, null, [{
    key: "initialize",
    value: function initialize(obj, compute_unit_price, compute_unit_limit, fee_type, token_id) {
      obj['compute_unit_price'] = compute_unit_price;
      obj['compute_unit_limit'] = compute_unit_limit;
      obj['fee_type'] = fee_type;
      obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>TransactionRequestSOLFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionRequestSOLFee} obj Optional instance to populate.
     * @return {module:model/TransactionRequestSOLFee} The populated <code>TransactionRequestSOLFee</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TransactionRequestSOLFee();
        _SOLComputeUnit["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('compute_unit_price')) {
          obj['compute_unit_price'] = _ApiClient["default"].convertToType(data['compute_unit_price'], 'String');
        }
        if (data.hasOwnProperty('compute_unit_limit')) {
          obj['compute_unit_limit'] = _ApiClient["default"].convertToType(data['compute_unit_limit'], 'String');
        }
        if (data.hasOwnProperty('fee_type')) {
          obj['fee_type'] = _FeeType["default"].constructFromObject(data['fee_type']);
        }
        if (data.hasOwnProperty('token_id')) {
          obj['token_id'] = _ApiClient["default"].convertToType(data['token_id'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionRequestSOLFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionRequestSOLFee</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(TransactionRequestSOLFee.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['compute_unit_price'] && !(typeof data['compute_unit_price'] === 'string' || data['compute_unit_price'] instanceof String)) {
        throw new Error("Expected the field `compute_unit_price` to be a primitive type in the JSON string but got " + data['compute_unit_price']);
      }
      // ensure the json data is a string
      if (data['compute_unit_limit'] && !(typeof data['compute_unit_limit'] === 'string' || data['compute_unit_limit'] instanceof String)) {
        throw new Error("Expected the field `compute_unit_limit` to be a primitive type in the JSON string but got " + data['compute_unit_limit']);
      }
      // ensure the json data is a string
      if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
        throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
      }
      return true;
    }
  }]);
}();
TransactionRequestSOLFee.RequiredProperties = ["compute_unit_price", "compute_unit_limit", "fee_type", "token_id"];

/**
 * The price paid per compute unit. This value determines the priority fee for the transaction, allowing you to increase inclusion probability in congested conditions.
 * @member {String} compute_unit_price
 */
TransactionRequestSOLFee.prototype['compute_unit_price'] = undefined;

/**
 * The maximum number of compute units your transaction is allowed to consume. It sets an upper bound on computational resource usage to prevent overload.
 * @member {String} compute_unit_limit
 */
TransactionRequestSOLFee.prototype['compute_unit_limit'] = undefined;

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionRequestSOLFee.prototype['fee_type'] = undefined;

/**
 * The token used to pay the transaction fee.
 * @member {String} token_id
 */
TransactionRequestSOLFee.prototype['token_id'] = undefined;

// Implement SOLComputeUnit interface:
/**
 * The price paid per compute unit. This value determines the priority fee for the transaction, allowing you to increase inclusion probability in congested conditions.
 * @member {String} compute_unit_price
 */
_SOLComputeUnit["default"].prototype['compute_unit_price'] = undefined;
/**
 * The maximum number of compute units your transaction is allowed to consume. It sets an upper bound on computational resource usage to prevent overload.
 * @member {String} compute_unit_limit
 */
_SOLComputeUnit["default"].prototype['compute_unit_limit'] = undefined;
var _default = exports["default"] = TransactionRequestSOLFee;