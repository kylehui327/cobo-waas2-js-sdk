"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _MPCVault = _interopRequireDefault(require("./MPCVault"));
var _MPCVaultType = _interopRequireDefault(require("./MPCVaultType"));
var _RootPubkey = _interopRequireDefault(require("./RootPubkey"));
var _WebhookEventDataType = _interopRequireDefault(require("./WebhookEventDataType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The MPCVaultEventData model module.
 * @module model/MPCVaultEventData
 */
var MPCVaultEventData = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>MPCVaultEventData</code>.
   * @alias module:model/MPCVaultEventData
   * @implements module:model/WebhookEventDataType
   * @implements module:model/MPCVault
   * @param data_type {module:model/MPCVaultEventData.DataTypeEnum}  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The payment address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
   */
  function MPCVaultEventData(data_type) {
    _classCallCheck(this, MPCVaultEventData);
    _WebhookEventDataType["default"].initialize(this, data_type);
    _MPCVault["default"].initialize(this);
    MPCVaultEventData.initialize(this, data_type);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(MPCVaultEventData, null, [{
    key: "initialize",
    value: function initialize(obj, data_type) {
      obj['data_type'] = data_type;
    }

    /**
     * Constructs a <code>MPCVaultEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MPCVaultEventData} obj Optional instance to populate.
     * @return {module:model/MPCVaultEventData} The populated <code>MPCVaultEventData</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new MPCVaultEventData();
        _WebhookEventDataType["default"].constructFromObject(data, obj);
        _MPCVault["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('data_type')) {
          obj['data_type'] = _ApiClient["default"].convertToType(data['data_type'], 'String');
        }
        if (data.hasOwnProperty('vault_id')) {
          obj['vault_id'] = _ApiClient["default"].convertToType(data['vault_id'], 'String');
        }
        if (data.hasOwnProperty('project_id')) {
          obj['project_id'] = _ApiClient["default"].convertToType(data['project_id'], 'String');
        }
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('type')) {
          obj['type'] = _MPCVaultType["default"].constructFromObject(data['type']);
        }
        if (data.hasOwnProperty('root_pubkeys')) {
          obj['root_pubkeys'] = _ApiClient["default"].convertToType(data['root_pubkeys'], [_RootPubkey["default"]]);
        }
        if (data.hasOwnProperty('created_timestamp')) {
          obj['created_timestamp'] = _ApiClient["default"].convertToType(data['created_timestamp'], 'Number');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MPCVaultEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MPCVaultEventData</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(MPCVaultEventData.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
        throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
      }
      // ensure the json data is a string
      if (data['vault_id'] && !(typeof data['vault_id'] === 'string' || data['vault_id'] instanceof String)) {
        throw new Error("Expected the field `vault_id` to be a primitive type in the JSON string but got " + data['vault_id']);
      }
      // ensure the json data is a string
      if (data['project_id'] && !(typeof data['project_id'] === 'string' || data['project_id'] instanceof String)) {
        throw new Error("Expected the field `project_id` to be a primitive type in the JSON string but got " + data['project_id']);
      }
      // ensure the json data is a string
      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      }
      if (data['root_pubkeys']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['root_pubkeys'])) {
          throw new Error("Expected the field `root_pubkeys` to be an array in the JSON data but got " + data['root_pubkeys']);
        }
        // validate the optional field `root_pubkeys` (array)
        var _iterator2 = _createForOfIteratorHelper(data['root_pubkeys']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _RootPubkey["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      return true;
    }
  }]);
}();
MPCVaultEventData.RequiredProperties = ["data_type"];

/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The payment address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
 * @member {module:model/MPCVaultEventData.DataTypeEnum} data_type
 */
MPCVaultEventData.prototype['data_type'] = undefined;

/**
 * The vault ID.
 * @member {String} vault_id
 */
MPCVaultEventData.prototype['vault_id'] = undefined;

/**
 * The project ID.
 * @member {String} project_id
 */
MPCVaultEventData.prototype['project_id'] = undefined;

/**
 * The vault name.
 * @member {String} name
 */
MPCVaultEventData.prototype['name'] = undefined;

/**
 * @member {module:model/MPCVaultType} type
 */
MPCVaultEventData.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/RootPubkey>} root_pubkeys
 */
MPCVaultEventData.prototype['root_pubkeys'] = undefined;

/**
 * The vault's creation time in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
MPCVaultEventData.prototype['created_timestamp'] = undefined;

// Implement WebhookEventDataType interface:
/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The payment address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
 * @member {module:model/WebhookEventDataType.DataTypeEnum} data_type
 */
_WebhookEventDataType["default"].prototype['data_type'] = undefined;
// Implement MPCVault interface:
/**
 * The vault ID.
 * @member {String} vault_id
 */
_MPCVault["default"].prototype['vault_id'] = undefined;
/**
 * The project ID.
 * @member {String} project_id
 */
_MPCVault["default"].prototype['project_id'] = undefined;
/**
 * The vault name.
 * @member {String} name
 */
_MPCVault["default"].prototype['name'] = undefined;
/**
 * @member {module:model/MPCVaultType} type
 */
_MPCVault["default"].prototype['type'] = undefined;
/**
 * @member {Array.<module:model/RootPubkey>} root_pubkeys
 */
_MPCVault["default"].prototype['root_pubkeys'] = undefined;
/**
 * The vault's creation time in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
_MPCVault["default"].prototype['created_timestamp'] = undefined;

/**
 * Allowed values for the <code>data_type</code> property.
 * @enum {String}
 * @readonly
 */
MPCVaultEventData['DataTypeEnum'] = {
  /**
   * value: "Transaction"
   * @const
   */
  "Transaction": "Transaction",
  /**
   * value: "TSSRequest"
   * @const
   */
  "TSSRequest": "TSSRequest",
  /**
   * value: "Addresses"
   * @const
   */
  "Addresses": "Addresses",
  /**
   * value: "WalletInfo"
   * @const
   */
  "WalletInfo": "WalletInfo",
  /**
   * value: "MPCVault"
   * @const
   */
  "MPCVault": "MPCVault",
  /**
   * value: "Chains"
   * @const
   */
  "Chains": "Chains",
  /**
   * value: "Tokens"
   * @const
   */
  "Tokens": "Tokens",
  /**
   * value: "TokenListing"
   * @const
   */
  "TokenListing": "TokenListing",
  /**
   * value: "PaymentOrder"
   * @const
   */
  "PaymentOrder": "PaymentOrder",
  /**
   * value: "PaymentRefund"
   * @const
   */
  "PaymentRefund": "PaymentRefund",
  /**
   * value: "PaymentSettlement"
   * @const
   */
  "PaymentSettlement": "PaymentSettlement",
  /**
   * value: "PaymentTransaction"
   * @const
   */
  "PaymentTransaction": "PaymentTransaction",
  /**
   * value: "PaymentAddressUpdate"
   * @const
   */
  "PaymentAddressUpdate": "PaymentAddressUpdate",
  /**
   * value: "BalanceUpdateInfo"
   * @const
   */
  "BalanceUpdateInfo": "BalanceUpdateInfo",
  /**
   * value: "SuspendedToken"
   * @const
   */
  "SuspendedToken": "SuspendedToken",
  /**
   * value: "unknown_default_open_api"
   * @const
   */
  "unknown_default_open_api": "unknown_default_open_api"
};
var _default = exports["default"] = MPCVaultEventData;