"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _PaymentTransaction = _interopRequireDefault(require("./PaymentTransaction"));
var _Refund = _interopRequireDefault(require("./Refund"));
var _RefundStatus = _interopRequireDefault(require("./RefundStatus"));
var _RefundType = _interopRequireDefault(require("./RefundType"));
var _WebhookEventDataType = _interopRequireDefault(require("./WebhookEventDataType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The PaymentRefundEventData model module.
 * @module model/PaymentRefundEventData
 */
var PaymentRefundEventData = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>PaymentRefundEventData</code>.
   * @alias module:model/PaymentRefundEventData
   * @implements module:model/WebhookEventDataType
   * @implements module:model/Refund
   * @param data_type {module:model/PaymentRefundEventData.DataTypeEnum}  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The payment address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
   * @param refund_id {String} The refund order ID.
   * @param token_id {String} The ID of the cryptocurrency used for refund.
   * @param chain_id {String} The ID of the blockchain network on which the refund transaction occurs.
   * @param amount {String} The amount in cryptocurrency to be returned for this refund order.
   * @param to_address {String} The recipient's wallet address where the refund will be sent.
   * @param status {module:model/RefundStatus} 
   */
  function PaymentRefundEventData(data_type, refund_id, token_id, chain_id, amount, to_address, status) {
    _classCallCheck(this, PaymentRefundEventData);
    _WebhookEventDataType["default"].initialize(this, data_type);
    _Refund["default"].initialize(this, refund_id, token_id, chain_id, amount, to_address, status);
    PaymentRefundEventData.initialize(this, data_type, refund_id, token_id, chain_id, amount, to_address, status);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(PaymentRefundEventData, null, [{
    key: "initialize",
    value: function initialize(obj, data_type, refund_id, token_id, chain_id, amount, to_address, status) {
      obj['data_type'] = data_type;
      obj['refund_id'] = refund_id;
      obj['token_id'] = token_id;
      obj['chain_id'] = chain_id;
      obj['amount'] = amount;
      obj['to_address'] = to_address;
      obj['status'] = status;
    }

    /**
     * Constructs a <code>PaymentRefundEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRefundEventData} obj Optional instance to populate.
     * @return {module:model/PaymentRefundEventData} The populated <code>PaymentRefundEventData</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new PaymentRefundEventData();
        _WebhookEventDataType["default"].constructFromObject(data, obj);
        _Refund["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('data_type')) {
          obj['data_type'] = _ApiClient["default"].convertToType(data['data_type'], 'String');
        }
        if (data.hasOwnProperty('request_id')) {
          obj['request_id'] = _ApiClient["default"].convertToType(data['request_id'], 'String');
        }
        if (data.hasOwnProperty('refund_id')) {
          obj['refund_id'] = _ApiClient["default"].convertToType(data['refund_id'], 'String');
        }
        if (data.hasOwnProperty('order_id')) {
          obj['order_id'] = _ApiClient["default"].convertToType(data['order_id'], 'String');
        }
        if (data.hasOwnProperty('merchant_id')) {
          obj['merchant_id'] = _ApiClient["default"].convertToType(data['merchant_id'], 'String');
        }
        if (data.hasOwnProperty('token_id')) {
          obj['token_id'] = _ApiClient["default"].convertToType(data['token_id'], 'String');
        }
        if (data.hasOwnProperty('chain_id')) {
          obj['chain_id'] = _ApiClient["default"].convertToType(data['chain_id'], 'String');
        }
        if (data.hasOwnProperty('amount')) {
          obj['amount'] = _ApiClient["default"].convertToType(data['amount'], 'String');
        }
        if (data.hasOwnProperty('to_address')) {
          obj['to_address'] = _ApiClient["default"].convertToType(data['to_address'], 'String');
        }
        if (data.hasOwnProperty('status')) {
          obj['status'] = _RefundStatus["default"].constructFromObject(data['status']);
        }
        if (data.hasOwnProperty('refund_type')) {
          obj['refund_type'] = _RefundType["default"].constructFromObject(data['refund_type']);
        }
        if (data.hasOwnProperty('created_timestamp')) {
          obj['created_timestamp'] = _ApiClient["default"].convertToType(data['created_timestamp'], 'Number');
        }
        if (data.hasOwnProperty('updated_timestamp')) {
          obj['updated_timestamp'] = _ApiClient["default"].convertToType(data['updated_timestamp'], 'Number');
        }
        if (data.hasOwnProperty('initiator')) {
          obj['initiator'] = _ApiClient["default"].convertToType(data['initiator'], 'String');
        }
        if (data.hasOwnProperty('transactions')) {
          obj['transactions'] = _ApiClient["default"].convertToType(data['transactions'], [_PaymentTransaction["default"]]);
        }
        if (data.hasOwnProperty('charge_merchant_fee')) {
          obj['charge_merchant_fee'] = _ApiClient["default"].convertToType(data['charge_merchant_fee'], 'Boolean');
        }
        if (data.hasOwnProperty('merchant_fee_amount')) {
          obj['merchant_fee_amount'] = _ApiClient["default"].convertToType(data['merchant_fee_amount'], 'String');
        }
        if (data.hasOwnProperty('merchant_fee_token_id')) {
          obj['merchant_fee_token_id'] = _ApiClient["default"].convertToType(data['merchant_fee_token_id'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentRefundEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentRefundEventData</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(PaymentRefundEventData.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
        throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
      }
      // ensure the json data is a string
      if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
        throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
      }
      // ensure the json data is a string
      if (data['refund_id'] && !(typeof data['refund_id'] === 'string' || data['refund_id'] instanceof String)) {
        throw new Error("Expected the field `refund_id` to be a primitive type in the JSON string but got " + data['refund_id']);
      }
      // ensure the json data is a string
      if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
        throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
      }
      // ensure the json data is a string
      if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
        throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
      }
      // ensure the json data is a string
      if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
        throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
      }
      // ensure the json data is a string
      if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
        throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
      }
      // ensure the json data is a string
      if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
        throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
      }
      // ensure the json data is a string
      if (data['to_address'] && !(typeof data['to_address'] === 'string' || data['to_address'] instanceof String)) {
        throw new Error("Expected the field `to_address` to be a primitive type in the JSON string but got " + data['to_address']);
      }
      // ensure the json data is a string
      if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
        throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
      }
      if (data['transactions']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['transactions'])) {
          throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
        }
        // validate the optional field `transactions` (array)
        var _iterator2 = _createForOfIteratorHelper(data['transactions']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _PaymentTransaction["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      // ensure the json data is a string
      if (data['merchant_fee_amount'] && !(typeof data['merchant_fee_amount'] === 'string' || data['merchant_fee_amount'] instanceof String)) {
        throw new Error("Expected the field `merchant_fee_amount` to be a primitive type in the JSON string but got " + data['merchant_fee_amount']);
      }
      // ensure the json data is a string
      if (data['merchant_fee_token_id'] && !(typeof data['merchant_fee_token_id'] === 'string' || data['merchant_fee_token_id'] instanceof String)) {
        throw new Error("Expected the field `merchant_fee_token_id` to be a primitive type in the JSON string but got " + data['merchant_fee_token_id']);
      }
      return true;
    }
  }]);
}();
PaymentRefundEventData.RequiredProperties = ["data_type", "refund_id", "token_id", "chain_id", "amount", "to_address", "status"];

/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The payment address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
 * @member {module:model/PaymentRefundEventData.DataTypeEnum} data_type
 */
PaymentRefundEventData.prototype['data_type'] = undefined;

/**
 * The request ID provided by you when creating the refund request.
 * @member {String} request_id
 */
PaymentRefundEventData.prototype['request_id'] = undefined;

/**
 * The refund order ID.
 * @member {String} refund_id
 */
PaymentRefundEventData.prototype['refund_id'] = undefined;

/**
 * The ID of the pay-in order corresponding to this refund.
 * @member {String} order_id
 */
PaymentRefundEventData.prototype['order_id'] = undefined;

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
PaymentRefundEventData.prototype['merchant_id'] = undefined;

/**
 * The ID of the cryptocurrency used for refund.
 * @member {String} token_id
 */
PaymentRefundEventData.prototype['token_id'] = undefined;

/**
 * The ID of the blockchain network on which the refund transaction occurs.
 * @member {String} chain_id
 */
PaymentRefundEventData.prototype['chain_id'] = undefined;

/**
 * The amount in cryptocurrency to be returned for this refund order.
 * @member {String} amount
 */
PaymentRefundEventData.prototype['amount'] = undefined;

/**
 * The recipient's wallet address where the refund will be sent.
 * @member {String} to_address
 */
PaymentRefundEventData.prototype['to_address'] = undefined;

/**
 * @member {module:model/RefundStatus} status
 */
PaymentRefundEventData.prototype['status'] = undefined;

/**
 * @member {module:model/RefundType} refund_type
 */
PaymentRefundEventData.prototype['refund_type'] = undefined;

/**
 * The creation time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
PaymentRefundEventData.prototype['created_timestamp'] = undefined;

/**
 * The last update time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
PaymentRefundEventData.prototype['updated_timestamp'] = undefined;

/**
 *  The initiator of this settlement request. Can return either an API key or the Payment Management App's ID.  - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payment API using the API key. - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payment Management App using the App ID. 
 * @member {String} initiator
 */
PaymentRefundEventData.prototype['initiator'] = undefined;

/**
 * An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
PaymentRefundEventData.prototype['transactions'] = undefined;

/**
 * Whether to charge developer fee to the merchant for the refund.    - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance    - `false`: The merchant is not charged any developer fee. 
 * @member {Boolean} charge_merchant_fee
 */
PaymentRefundEventData.prototype['charge_merchant_fee'] = undefined;

/**
 * The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. This is only applicable if `charge_merchant_fee` is set to `true`.
 * @member {String} merchant_fee_amount
 */
PaymentRefundEventData.prototype['merchant_fee_amount'] = undefined;

/**
 * The ID of the cryptocurrency used for the developer fee. This is only applicable if `charge_merchant_fee` is set to true.
 * @member {String} merchant_fee_token_id
 */
PaymentRefundEventData.prototype['merchant_fee_token_id'] = undefined;

// Implement WebhookEventDataType interface:
/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The payment address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
 * @member {module:model/WebhookEventDataType.DataTypeEnum} data_type
 */
_WebhookEventDataType["default"].prototype['data_type'] = undefined;
// Implement Refund interface:
/**
 * The request ID provided by you when creating the refund request.
 * @member {String} request_id
 */
_Refund["default"].prototype['request_id'] = undefined;
/**
 * The refund order ID.
 * @member {String} refund_id
 */
_Refund["default"].prototype['refund_id'] = undefined;
/**
 * The ID of the pay-in order corresponding to this refund.
 * @member {String} order_id
 */
_Refund["default"].prototype['order_id'] = undefined;
/**
 * The merchant ID.
 * @member {String} merchant_id
 */
_Refund["default"].prototype['merchant_id'] = undefined;
/**
 * The ID of the cryptocurrency used for refund.
 * @member {String} token_id
 */
_Refund["default"].prototype['token_id'] = undefined;
/**
 * The ID of the blockchain network on which the refund transaction occurs.
 * @member {String} chain_id
 */
_Refund["default"].prototype['chain_id'] = undefined;
/**
 * The amount in cryptocurrency to be returned for this refund order.
 * @member {String} amount
 */
_Refund["default"].prototype['amount'] = undefined;
/**
 * The recipient's wallet address where the refund will be sent.
 * @member {String} to_address
 */
_Refund["default"].prototype['to_address'] = undefined;
/**
 * @member {module:model/RefundStatus} status
 */
_Refund["default"].prototype['status'] = undefined;
/**
 * @member {module:model/RefundType} refund_type
 */
_Refund["default"].prototype['refund_type'] = undefined;
/**
 * The creation time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
_Refund["default"].prototype['created_timestamp'] = undefined;
/**
 * The last update time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
_Refund["default"].prototype['updated_timestamp'] = undefined;
/**
 *  The initiator of this settlement request. Can return either an API key or the Payment Management App's ID.  - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payment API using the API key. - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payment Management App using the App ID. 
 * @member {String} initiator
 */
_Refund["default"].prototype['initiator'] = undefined;
/**
 * An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
_Refund["default"].prototype['transactions'] = undefined;
/**
 * Whether to charge developer fee to the merchant for the refund.    - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance    - `false`: The merchant is not charged any developer fee. 
 * @member {Boolean} charge_merchant_fee
 */
_Refund["default"].prototype['charge_merchant_fee'] = undefined;
/**
 * The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. This is only applicable if `charge_merchant_fee` is set to `true`.
 * @member {String} merchant_fee_amount
 */
_Refund["default"].prototype['merchant_fee_amount'] = undefined;
/**
 * The ID of the cryptocurrency used for the developer fee. This is only applicable if `charge_merchant_fee` is set to true.
 * @member {String} merchant_fee_token_id
 */
_Refund["default"].prototype['merchant_fee_token_id'] = undefined;

/**
 * Allowed values for the <code>data_type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentRefundEventData['DataTypeEnum'] = {
  /**
   * value: "Transaction"
   * @const
   */
  "Transaction": "Transaction",
  /**
   * value: "TSSRequest"
   * @const
   */
  "TSSRequest": "TSSRequest",
  /**
   * value: "Addresses"
   * @const
   */
  "Addresses": "Addresses",
  /**
   * value: "WalletInfo"
   * @const
   */
  "WalletInfo": "WalletInfo",
  /**
   * value: "MPCVault"
   * @const
   */
  "MPCVault": "MPCVault",
  /**
   * value: "Chains"
   * @const
   */
  "Chains": "Chains",
  /**
   * value: "Tokens"
   * @const
   */
  "Tokens": "Tokens",
  /**
   * value: "TokenListing"
   * @const
   */
  "TokenListing": "TokenListing",
  /**
   * value: "PaymentOrder"
   * @const
   */
  "PaymentOrder": "PaymentOrder",
  /**
   * value: "PaymentRefund"
   * @const
   */
  "PaymentRefund": "PaymentRefund",
  /**
   * value: "PaymentSettlement"
   * @const
   */
  "PaymentSettlement": "PaymentSettlement",
  /**
   * value: "PaymentTransaction"
   * @const
   */
  "PaymentTransaction": "PaymentTransaction",
  /**
   * value: "PaymentAddressUpdate"
   * @const
   */
  "PaymentAddressUpdate": "PaymentAddressUpdate",
  /**
   * value: "BalanceUpdateInfo"
   * @const
   */
  "BalanceUpdateInfo": "BalanceUpdateInfo",
  /**
   * value: "SuspendedToken"
   * @const
   */
  "SuspendedToken": "SuspendedToken",
  /**
   * value: "unknown_default_open_api"
   * @const
   */
  "unknown_default_open_api": "unknown_default_open_api"
};
var _default = exports["default"] = PaymentRefundEventData;