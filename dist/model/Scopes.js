"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _WalletSubtype = _interopRequireDefault(require("./WalletSubtype"));
var _WalletType = _interopRequireDefault(require("./WalletType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The Scopes model module.
 * @module model/Scopes
 */
var Scopes = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Scopes</code>.
   * The wallet scopes associated with this API key.
   * @alias module:model/Scopes
   */
  function Scopes() {
    _classCallCheck(this, Scopes);
    Scopes.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(Scopes, null, [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>Scopes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scopes} obj Optional instance to populate.
     * @return {module:model/Scopes} The populated <code>Scopes</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Scopes();
        if (data.hasOwnProperty('wallet_types')) {
          obj['wallet_types'] = _ApiClient["default"].convertToType(data['wallet_types'], [_WalletType["default"]]);
        }
        if (data.hasOwnProperty('wallet_subtypes')) {
          obj['wallet_subtypes'] = _ApiClient["default"].convertToType(data['wallet_subtypes'], [_WalletSubtype["default"]]);
        }
        if (data.hasOwnProperty('wallet_ids')) {
          obj['wallet_ids'] = _ApiClient["default"].convertToType(data['wallet_ids'], ['String']);
        }
        if (data.hasOwnProperty('vault_ids')) {
          obj['vault_ids'] = _ApiClient["default"].convertToType(data['vault_ids'], ['String']);
        }
        if (data.hasOwnProperty('project_ids')) {
          obj['project_ids'] = _ApiClient["default"].convertToType(data['project_ids'], ['String']);
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scopes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scopes</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // ensure the json data is an array
      if (!Array.isArray(data['wallet_types'])) {
        throw new Error("Expected the field `wallet_types` to be an array in the JSON data but got " + data['wallet_types']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['wallet_subtypes'])) {
        throw new Error("Expected the field `wallet_subtypes` to be an array in the JSON data but got " + data['wallet_subtypes']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['wallet_ids'])) {
        throw new Error("Expected the field `wallet_ids` to be an array in the JSON data but got " + data['wallet_ids']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['vault_ids'])) {
        throw new Error("Expected the field `vault_ids` to be an array in the JSON data but got " + data['vault_ids']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['project_ids'])) {
        throw new Error("Expected the field `project_ids` to be an array in the JSON data but got " + data['project_ids']);
      }
      return true;
    }
  }]);
}();
/**
 * The list of wallet types that this API key can access. Possible values include:   - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)   - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)   - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)   - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
 * @member {Array.<module:model/WalletType>} wallet_types
 */
Scopes.prototype['wallet_types'] = undefined;

/**
 * The list of wallet sub-types that this API key can access. Possible values include:   - `Asset`: Custodial Wallets (Asset Wallets).   - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).   - `User-Controlled`: MPC Wallets (User-Controlled Wallets).   - `Safe{Wallet}`: Smart Contract Wallets (Safe).   - `Main`: Exchange Wallets (Main Account).   - `Sub`: Exchange Wallets (Sub Account). 
 * @member {Array.<module:model/WalletSubtype>} wallet_subtypes
 */
Scopes.prototype['wallet_subtypes'] = undefined;

/**
 * The list of wallet IDs that this API key can access.
 * @member {Array.<String>} wallet_ids
 */
Scopes.prototype['wallet_ids'] = undefined;

/**
 * (Applicable to MPC Wallets only) The list of vault IDs that this API key can access.
 * @member {Array.<String>} vault_ids
 */
Scopes.prototype['vault_ids'] = undefined;

/**
 * (Applicable to MPC Wallets only) The list of project IDs that this API key can access.
 * @member {Array.<String>} project_ids
 */
Scopes.prototype['project_ids'] = undefined;
var _default = exports["default"] = Scopes;