"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _RefundType = _interopRequireDefault(require("./RefundType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The CreateRefundRequest model module.
 * @module model/CreateRefundRequest
 */
var CreateRefundRequest = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>CreateRefundRequest</code>.
   * @alias module:model/CreateRefundRequest
   * @param request_id {String} The request ID that is used to track a refund request. The request ID is provided by you and must be unique.
   * @param payable_amount {String} The amount to refund in cryptocurrency. The amount must be a positive integer with up to two decimal places.
   * @param token_id {String} The ID of the cryptocurrency used for refund. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
   * @param refund_type {module:model/RefundType} 
   */
  function CreateRefundRequest(request_id, payable_amount, token_id, refund_type) {
    _classCallCheck(this, CreateRefundRequest);
    CreateRefundRequest.initialize(this, request_id, payable_amount, token_id, refund_type);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(CreateRefundRequest, null, [{
    key: "initialize",
    value: function initialize(obj, request_id, payable_amount, token_id, refund_type) {
      obj['request_id'] = request_id;
      obj['payable_amount'] = payable_amount;
      obj['token_id'] = token_id;
      obj['refund_type'] = refund_type;
    }

    /**
     * Constructs a <code>CreateRefundRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRefundRequest} obj Optional instance to populate.
     * @return {module:model/CreateRefundRequest} The populated <code>CreateRefundRequest</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new CreateRefundRequest();
        if (data.hasOwnProperty('request_id')) {
          obj['request_id'] = _ApiClient["default"].convertToType(data['request_id'], 'String');
        }
        if (data.hasOwnProperty('merchant_id')) {
          obj['merchant_id'] = _ApiClient["default"].convertToType(data['merchant_id'], 'String');
        }
        if (data.hasOwnProperty('payable_amount')) {
          obj['payable_amount'] = _ApiClient["default"].convertToType(data['payable_amount'], 'String');
        }
        if (data.hasOwnProperty('to_address')) {
          obj['to_address'] = _ApiClient["default"].convertToType(data['to_address'], 'String');
        }
        if (data.hasOwnProperty('token_id')) {
          obj['token_id'] = _ApiClient["default"].convertToType(data['token_id'], 'String');
        }
        if (data.hasOwnProperty('refund_type')) {
          obj['refund_type'] = _RefundType["default"].constructFromObject(data['refund_type']);
        }
        if (data.hasOwnProperty('order_id')) {
          obj['order_id'] = _ApiClient["default"].convertToType(data['order_id'], 'String');
        }
        if (data.hasOwnProperty('charge_merchant_fee')) {
          obj['charge_merchant_fee'] = _ApiClient["default"].convertToType(data['charge_merchant_fee'], 'Boolean');
        }
        if (data.hasOwnProperty('merchant_fee_amount')) {
          obj['merchant_fee_amount'] = _ApiClient["default"].convertToType(data['merchant_fee_amount'], 'String');
        }
        if (data.hasOwnProperty('merchant_fee_token_id')) {
          obj['merchant_fee_token_id'] = _ApiClient["default"].convertToType(data['merchant_fee_token_id'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateRefundRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateRefundRequest</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(CreateRefundRequest.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
        throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
      }
      // ensure the json data is a string
      if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
        throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
      }
      // ensure the json data is a string
      if (data['payable_amount'] && !(typeof data['payable_amount'] === 'string' || data['payable_amount'] instanceof String)) {
        throw new Error("Expected the field `payable_amount` to be a primitive type in the JSON string but got " + data['payable_amount']);
      }
      // ensure the json data is a string
      if (data['to_address'] && !(typeof data['to_address'] === 'string' || data['to_address'] instanceof String)) {
        throw new Error("Expected the field `to_address` to be a primitive type in the JSON string but got " + data['to_address']);
      }
      // ensure the json data is a string
      if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
        throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
      }
      // ensure the json data is a string
      if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
        throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
      }
      // ensure the json data is a string
      if (data['merchant_fee_amount'] && !(typeof data['merchant_fee_amount'] === 'string' || data['merchant_fee_amount'] instanceof String)) {
        throw new Error("Expected the field `merchant_fee_amount` to be a primitive type in the JSON string but got " + data['merchant_fee_amount']);
      }
      // ensure the json data is a string
      if (data['merchant_fee_token_id'] && !(typeof data['merchant_fee_token_id'] === 'string' || data['merchant_fee_token_id'] instanceof String)) {
        throw new Error("Expected the field `merchant_fee_token_id` to be a primitive type in the JSON string but got " + data['merchant_fee_token_id']);
      }
      return true;
    }
  }]);
}();
CreateRefundRequest.RequiredProperties = ["request_id", "payable_amount", "token_id", "refund_type"];

/**
 * The request ID that is used to track a refund request. The request ID is provided by you and must be unique.
 * @member {String} request_id
 */
CreateRefundRequest.prototype['request_id'] = undefined;

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
CreateRefundRequest.prototype['merchant_id'] = undefined;

/**
 * The amount to refund in cryptocurrency. The amount must be a positive integer with up to two decimal places.
 * @member {String} payable_amount
 */
CreateRefundRequest.prototype['payable_amount'] = undefined;

/**
 * The address where the refunded cryptocurrency will be sent.
 * @member {String} to_address
 */
CreateRefundRequest.prototype['to_address'] = undefined;

/**
 * The ID of the cryptocurrency used for refund. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
CreateRefundRequest.prototype['token_id'] = undefined;

/**
 * @member {module:model/RefundType} refund_type
 */
CreateRefundRequest.prototype['refund_type'] = undefined;

/**
 * The ID of the original pay-in order associated with this refund. Use this to track refunds against specific payments.
 * @member {String} order_id
 */
CreateRefundRequest.prototype['order_id'] = undefined;

/**
 * Whether to charge developer fee to the merchant.     - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance    - `false`: The merchant is not charged any developer fee  When enabled, ensure both `merchant_fee_amount` and `merchant_fee_token_id` are properly specified. 
 * @member {Boolean} charge_merchant_fee
 */
CreateRefundRequest.prototype['charge_merchant_fee'] = undefined;

/**
 * The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. Required when `charge_merchant_fee` is `true`. Must be:   - A positive integer with up to two decimal places.   - Less than the refund amount 
 * @member {String} merchant_fee_amount
 */
CreateRefundRequest.prototype['merchant_fee_amount'] = undefined;

/**
 * The ID of the cryptocurrency used for the developer fee. It must be the same as `token_id`. Supported values:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} merchant_fee_token_id
 */
CreateRefundRequest.prototype['merchant_fee_token_id'] = undefined;
var _default = exports["default"] = CreateRefundRequest;