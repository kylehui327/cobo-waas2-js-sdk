"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ContractCallDestination = _interopRequireDefault(require("./ContractCallDestination"));
var _ContractCallSource = _interopRequireDefault(require("./ContractCallSource"));
var _EstimateContractCallFeeParams = _interopRequireDefault(require("./EstimateContractCallFeeParams"));
var _EstimateFeeRequestType = _interopRequireDefault(require("./EstimateFeeRequestType"));
var _EstimateTransferFeeParams = _interopRequireDefault(require("./EstimateTransferFeeParams"));
var _FeeType = _interopRequireDefault(require("./FeeType"));
var _EstimateFeeParams;
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The EstimateFeeParams model module.
 * @module model/EstimateFeeParams
 */
var EstimateFeeParams = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>EstimateFeeParams</code>.
   * @alias module:model/EstimateFeeParams
   * @param {(module:model/EstimateContractCallFeeParams|module:model/EstimateTransferFeeParams)} instance The actual instance to initialize EstimateFeeParams.
   */
  function EstimateFeeParams() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _classCallCheck(this, EstimateFeeParams);
    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    _defineProperty(this, "toJSON", function () {
      return this.getActualInstance();
    });
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    var discriminatorValue = instance["request_type"];
    if (discriminatorValue) {
      switch (discriminatorValue) {
        case "ContractCall":
          this.actualInstance = _EstimateContractCallFeeParams["default"].constructFromObject(instance);
          match++;
          break;
        case "Transfer":
          this.actualInstance = _EstimateTransferFeeParams["default"].constructFromObject(instance);
          match++;
          break;
        default:
          errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
          break;
      }
      return;
    }
    try {
      if (instance instanceof _EstimateTransferFeeParams["default"]) {
        this.actualInstance = instance;
      } else if (!!_EstimateTransferFeeParams["default"].validateJSON && _EstimateTransferFeeParams["default"].validateJSON(instance)) {
        // plain JS object
        // create EstimateTransferFeeParams from JS object
        this.actualInstance = _EstimateTransferFeeParams["default"].constructFromObject(instance);
      } else {
        if (_EstimateTransferFeeParams["default"].constructFromObject(instance)) {
          if (!!_EstimateTransferFeeParams["default"].constructFromObject(instance).toJSON) {
            if (_EstimateTransferFeeParams["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _EstimateTransferFeeParams["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _EstimateTransferFeeParams["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into EstimateTransferFeeParams
      errorMessages.push("Failed to construct EstimateTransferFeeParams: " + err);
    }
    try {
      if (instance instanceof _EstimateContractCallFeeParams["default"]) {
        this.actualInstance = instance;
      } else if (!!_EstimateContractCallFeeParams["default"].validateJSON && _EstimateContractCallFeeParams["default"].validateJSON(instance)) {
        // plain JS object
        // create EstimateContractCallFeeParams from JS object
        this.actualInstance = _EstimateContractCallFeeParams["default"].constructFromObject(instance);
      } else {
        if (_EstimateContractCallFeeParams["default"].constructFromObject(instance)) {
          if (!!_EstimateContractCallFeeParams["default"].constructFromObject(instance).toJSON) {
            if (_EstimateContractCallFeeParams["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _EstimateContractCallFeeParams["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _EstimateContractCallFeeParams["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into EstimateContractCallFeeParams
      errorMessages.push("Failed to construct EstimateContractCallFeeParams: " + err);
    }

    // if (match > 1) {
    //    throw new Error("Multiple matches found constructing `EstimateFeeParams` with oneOf schemas EstimateContractCallFeeParams, EstimateTransferFeeParams. Input: " + JSON.stringify(instance));
    // } else
    if (match === 0) {
      //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
      //    throw new Error("No match found constructing `EstimateFeeParams` with oneOf schemas EstimateContractCallFeeParams, EstimateTransferFeeParams. Details: " +
      //                    errorMessages.join(", "));
      return;
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>EstimateFeeParams</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EstimateFeeParams} obj Optional instance to populate.
   * @return {module:model/EstimateFeeParams} The populated <code>EstimateFeeParams</code> instance.
   */
  return _createClass(EstimateFeeParams, [{
    key: "getActualInstance",
    value:
    /**
     * Gets the actual instance, which can be <code>EstimateContractCallFeeParams</code>, <code>EstimateTransferFeeParams</code>.
     * @return {(module:model/EstimateContractCallFeeParams|module:model/EstimateTransferFeeParams)} The actual instance.
     */
    function getActualInstance() {
      return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>EstimateContractCallFeeParams</code>, <code>EstimateTransferFeeParams</code>.
     * @param {(module:model/EstimateContractCallFeeParams|module:model/EstimateTransferFeeParams)} obj The actual instance.
     */
  }, {
    key: "setActualInstance",
    value: function setActualInstance(obj) {
      this.actualInstance = EstimateFeeParams.constructFromObject(obj).getActualInstance();
    }
  }], [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      return new EstimateFeeParams(data);
    }
  }]);
}();
/**
 * The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization. It is recommended to use the same request ID as the transaction for which you want to estimate the transaction fee.
 * @member {String} request_id
 */
_EstimateFeeParams = EstimateFeeParams;
/**
 * Create an instance of EstimateFeeParams from a JSON string.
 * @param {string} json_string JSON string.
 * @return {module:model/EstimateFeeParams} An instance of EstimateFeeParams.
 */
_defineProperty(EstimateFeeParams, "fromJSON", function (json_string) {
  return _EstimateFeeParams.constructFromObject(JSON.parse(json_string));
});
EstimateFeeParams.prototype['request_id'] = undefined;

/**
 * @member {module:model/EstimateFeeRequestType} request_type
 */
EstimateFeeParams.prototype['request_type'] = undefined;

/**
 * @member {module:model/ContractCallSource} source
 */
EstimateFeeParams.prototype['source'] = undefined;

/**
 * The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
 * @member {String} token_id
 */
EstimateFeeParams.prototype['token_id'] = undefined;

/**
 * @member {module:model/ContractCallDestination} destination
 */
EstimateFeeParams.prototype['destination'] = undefined;

/**
 * @member {module:model/FeeType} fee_type
 */
EstimateFeeParams.prototype['fee_type'] = undefined;

/**
 * The ID of the transaction that this transaction replaced.
 * @member {String} replaced_transaction_id
 */
EstimateFeeParams.prototype['replaced_transaction_id'] = undefined;

/**
 * The chain ID of the chain on which the smart contract is issued. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
 * @member {String} chain_id
 */
EstimateFeeParams.prototype['chain_id'] = undefined;
EstimateFeeParams.OneOf = ["EstimateContractCallFeeParams", "EstimateTransferFeeParams"];
var _default = exports["default"] = EstimateFeeParams;