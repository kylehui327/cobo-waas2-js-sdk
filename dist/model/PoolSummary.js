"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _WalletSubtype = _interopRequireDefault(require("./WalletSubtype"));
var _WalletType = _interopRequireDefault(require("./WalletType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The PoolSummary model module.
 * @module model/PoolSummary
 */
var PoolSummary = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>PoolSummary</code>.
   * The basic information of the staking pool.
   * @alias module:model/PoolSummary
   * @param id {String} The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token.
   * @param chain_id {String} The chain ID.
   * @param protocol {String} The name of the protocol.
   * @param protocol_icon_url {String} The URL of the protocol's icon.
   * @param supported_wallet_types {Array.<module:model/WalletType>} The wallet type. Possible values include:  - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)  - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)  - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)  - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
   * @param supported_wallet_subtypes {Array.<module:model/WalletSubtype>} The wallet subtype. Possible values include: - `Asset`: Custodial Wallets (Asset Wallets). - `Web3`: Custodial Wallets (Web3  Wallets). - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets). - `User-Controlled`: MPC Wallets (User-Controlled Wallets). - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}). - `Main`: Exchange Wallets (Main Account). - `Sub`: Exchange Wallets (Sub Account). 
   * @param token_id {String} The token ID.
   * @param est_apr {Number} The estimated annual percentage rate (APR).
   */
  function PoolSummary(id, chain_id, protocol, protocol_icon_url, supported_wallet_types, supported_wallet_subtypes, token_id, est_apr) {
    _classCallCheck(this, PoolSummary);
    PoolSummary.initialize(this, id, chain_id, protocol, protocol_icon_url, supported_wallet_types, supported_wallet_subtypes, token_id, est_apr);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(PoolSummary, null, [{
    key: "initialize",
    value: function initialize(obj, id, chain_id, protocol, protocol_icon_url, supported_wallet_types, supported_wallet_subtypes, token_id, est_apr) {
      obj['id'] = id;
      obj['chain_id'] = chain_id;
      obj['protocol'] = protocol;
      obj['protocol_icon_url'] = protocol_icon_url;
      obj['supported_wallet_types'] = supported_wallet_types;
      obj['supported_wallet_subtypes'] = supported_wallet_subtypes;
      obj['token_id'] = token_id;
      obj['est_apr'] = est_apr;
    }

    /**
     * Constructs a <code>PoolSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PoolSummary} obj Optional instance to populate.
     * @return {module:model/PoolSummary} The populated <code>PoolSummary</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new PoolSummary();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('chain_id')) {
          obj['chain_id'] = _ApiClient["default"].convertToType(data['chain_id'], 'String');
        }
        if (data.hasOwnProperty('protocol')) {
          obj['protocol'] = _ApiClient["default"].convertToType(data['protocol'], 'String');
        }
        if (data.hasOwnProperty('protocol_icon_url')) {
          obj['protocol_icon_url'] = _ApiClient["default"].convertToType(data['protocol_icon_url'], 'String');
        }
        if (data.hasOwnProperty('supported_wallet_types')) {
          obj['supported_wallet_types'] = _ApiClient["default"].convertToType(data['supported_wallet_types'], [_WalletType["default"]]);
        }
        if (data.hasOwnProperty('supported_wallet_subtypes')) {
          obj['supported_wallet_subtypes'] = _ApiClient["default"].convertToType(data['supported_wallet_subtypes'], [_WalletSubtype["default"]]);
        }
        if (data.hasOwnProperty('token_id')) {
          obj['token_id'] = _ApiClient["default"].convertToType(data['token_id'], 'String');
        }
        if (data.hasOwnProperty('est_apr')) {
          obj['est_apr'] = _ApiClient["default"].convertToType(data['est_apr'], 'Number');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PoolSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PoolSummary</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(PoolSummary.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
        throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
      }
      // ensure the json data is a string
      if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
        throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
      }
      // ensure the json data is a string
      if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
        throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
      }
      // ensure the json data is a string
      if (data['protocol_icon_url'] && !(typeof data['protocol_icon_url'] === 'string' || data['protocol_icon_url'] instanceof String)) {
        throw new Error("Expected the field `protocol_icon_url` to be a primitive type in the JSON string but got " + data['protocol_icon_url']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['supported_wallet_types'])) {
        throw new Error("Expected the field `supported_wallet_types` to be an array in the JSON data but got " + data['supported_wallet_types']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['supported_wallet_subtypes'])) {
        throw new Error("Expected the field `supported_wallet_subtypes` to be an array in the JSON data but got " + data['supported_wallet_subtypes']);
      }
      // ensure the json data is a string
      if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
        throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
      }
      return true;
    }
  }]);
}();
PoolSummary.RequiredProperties = ["id", "chain_id", "protocol", "protocol_icon_url", "supported_wallet_types", "supported_wallet_subtypes", "token_id", "est_apr"];

/**
 * The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token.
 * @member {String} id
 */
PoolSummary.prototype['id'] = undefined;

/**
 * The chain ID.
 * @member {String} chain_id
 */
PoolSummary.prototype['chain_id'] = undefined;

/**
 * The name of the protocol.
 * @member {String} protocol
 */
PoolSummary.prototype['protocol'] = undefined;

/**
 * The URL of the protocol's icon.
 * @member {String} protocol_icon_url
 */
PoolSummary.prototype['protocol_icon_url'] = undefined;

/**
 * The wallet type. Possible values include:  - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)  - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)  - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)  - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
 * @member {Array.<module:model/WalletType>} supported_wallet_types
 */
PoolSummary.prototype['supported_wallet_types'] = undefined;

/**
 * The wallet subtype. Possible values include: - `Asset`: Custodial Wallets (Asset Wallets). - `Web3`: Custodial Wallets (Web3  Wallets). - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets). - `User-Controlled`: MPC Wallets (User-Controlled Wallets). - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}). - `Main`: Exchange Wallets (Main Account). - `Sub`: Exchange Wallets (Sub Account). 
 * @member {Array.<module:model/WalletSubtype>} supported_wallet_subtypes
 */
PoolSummary.prototype['supported_wallet_subtypes'] = undefined;

/**
 * The token ID.
 * @member {String} token_id
 */
PoolSummary.prototype['token_id'] = undefined;

/**
 * The estimated annual percentage rate (APR).
 * @member {Number} est_apr
 */
PoolSummary.prototype['est_apr'] = undefined;
var _default = exports["default"] = PoolSummary;