"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ActivityType = _interopRequireDefault(require("./ActivityType"));
var _CreateUnstakeActivityExtra = _interopRequireDefault(require("./CreateUnstakeActivityExtra"));
var _EstimateClaimFee = _interopRequireDefault(require("./EstimateClaimFee"));
var _EstimateStakeFee = _interopRequireDefault(require("./EstimateStakeFee"));
var _EstimateUnstakeFee = _interopRequireDefault(require("./EstimateUnstakeFee"));
var _EstimateWithdrawFee = _interopRequireDefault(require("./EstimateWithdrawFee"));
var _StakingPoolId = _interopRequireDefault(require("./StakingPoolId"));
var _StakingSource = _interopRequireDefault(require("./StakingSource"));
var _TransactionRequestFee = _interopRequireDefault(require("./TransactionRequestFee"));
var _GetStakingEstimationFeeRequest;
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The GetStakingEstimationFeeRequest model module.
 * @module model/GetStakingEstimationFeeRequest
 */
var GetStakingEstimationFeeRequest = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>GetStakingEstimationFeeRequest</code>.
   * @alias module:model/GetStakingEstimationFeeRequest
   * @param {(module:model/EstimateClaimFee|module:model/EstimateStakeFee|module:model/EstimateUnstakeFee|module:model/EstimateWithdrawFee)} instance The actual instance to initialize GetStakingEstimationFeeRequest.
   */
  function GetStakingEstimationFeeRequest() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _classCallCheck(this, GetStakingEstimationFeeRequest);
    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    _defineProperty(this, "toJSON", function () {
      return this.getActualInstance();
    });
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    var discriminatorValue = instance["activity_type"];
    if (discriminatorValue) {
      switch (discriminatorValue) {
        case "Claim":
          this.actualInstance = _EstimateClaimFee["default"].constructFromObject(instance);
          match++;
          break;
        case "Stake":
          this.actualInstance = _EstimateStakeFee["default"].constructFromObject(instance);
          match++;
          break;
        case "Unstake":
          this.actualInstance = _EstimateUnstakeFee["default"].constructFromObject(instance);
          match++;
          break;
        case "Withdraw":
          this.actualInstance = _EstimateWithdrawFee["default"].constructFromObject(instance);
          match++;
          break;
        default:
          errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
          break;
      }
      return;
    }
    try {
      if (instance instanceof _EstimateStakeFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_EstimateStakeFee["default"].validateJSON && _EstimateStakeFee["default"].validateJSON(instance)) {
        // plain JS object
        // create EstimateStakeFee from JS object
        this.actualInstance = _EstimateStakeFee["default"].constructFromObject(instance);
      } else {
        if (_EstimateStakeFee["default"].constructFromObject(instance)) {
          if (!!_EstimateStakeFee["default"].constructFromObject(instance).toJSON) {
            if (_EstimateStakeFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _EstimateStakeFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _EstimateStakeFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into EstimateStakeFee
      errorMessages.push("Failed to construct EstimateStakeFee: " + err);
    }
    try {
      if (instance instanceof _EstimateUnstakeFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_EstimateUnstakeFee["default"].validateJSON && _EstimateUnstakeFee["default"].validateJSON(instance)) {
        // plain JS object
        // create EstimateUnstakeFee from JS object
        this.actualInstance = _EstimateUnstakeFee["default"].constructFromObject(instance);
      } else {
        if (_EstimateUnstakeFee["default"].constructFromObject(instance)) {
          if (!!_EstimateUnstakeFee["default"].constructFromObject(instance).toJSON) {
            if (_EstimateUnstakeFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _EstimateUnstakeFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _EstimateUnstakeFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into EstimateUnstakeFee
      errorMessages.push("Failed to construct EstimateUnstakeFee: " + err);
    }
    try {
      if (instance instanceof _EstimateWithdrawFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_EstimateWithdrawFee["default"].validateJSON && _EstimateWithdrawFee["default"].validateJSON(instance)) {
        // plain JS object
        // create EstimateWithdrawFee from JS object
        this.actualInstance = _EstimateWithdrawFee["default"].constructFromObject(instance);
      } else {
        if (_EstimateWithdrawFee["default"].constructFromObject(instance)) {
          if (!!_EstimateWithdrawFee["default"].constructFromObject(instance).toJSON) {
            if (_EstimateWithdrawFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _EstimateWithdrawFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _EstimateWithdrawFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into EstimateWithdrawFee
      errorMessages.push("Failed to construct EstimateWithdrawFee: " + err);
    }
    try {
      if (instance instanceof _EstimateClaimFee["default"]) {
        this.actualInstance = instance;
      } else if (!!_EstimateClaimFee["default"].validateJSON && _EstimateClaimFee["default"].validateJSON(instance)) {
        // plain JS object
        // create EstimateClaimFee from JS object
        this.actualInstance = _EstimateClaimFee["default"].constructFromObject(instance);
      } else {
        if (_EstimateClaimFee["default"].constructFromObject(instance)) {
          if (!!_EstimateClaimFee["default"].constructFromObject(instance).toJSON) {
            if (_EstimateClaimFee["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _EstimateClaimFee["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _EstimateClaimFee["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into EstimateClaimFee
      errorMessages.push("Failed to construct EstimateClaimFee: " + err);
    }

    // if (match > 1) {
    //    throw new Error("Multiple matches found constructing `GetStakingEstimationFeeRequest` with oneOf schemas EstimateClaimFee, EstimateStakeFee, EstimateUnstakeFee, EstimateWithdrawFee. Input: " + JSON.stringify(instance));
    // } else
    if (match === 0) {
      //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
      //    throw new Error("No match found constructing `GetStakingEstimationFeeRequest` with oneOf schemas EstimateClaimFee, EstimateStakeFee, EstimateUnstakeFee, EstimateWithdrawFee. Details: " +
      //                    errorMessages.join(", "));
      return;
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>GetStakingEstimationFeeRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetStakingEstimationFeeRequest} obj Optional instance to populate.
   * @return {module:model/GetStakingEstimationFeeRequest} The populated <code>GetStakingEstimationFeeRequest</code> instance.
   */
  return _createClass(GetStakingEstimationFeeRequest, [{
    key: "getActualInstance",
    value:
    /**
     * Gets the actual instance, which can be <code>EstimateClaimFee</code>, <code>EstimateStakeFee</code>, <code>EstimateUnstakeFee</code>, <code>EstimateWithdrawFee</code>.
     * @return {(module:model/EstimateClaimFee|module:model/EstimateStakeFee|module:model/EstimateUnstakeFee|module:model/EstimateWithdrawFee)} The actual instance.
     */
    function getActualInstance() {
      return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>EstimateClaimFee</code>, <code>EstimateStakeFee</code>, <code>EstimateUnstakeFee</code>, <code>EstimateWithdrawFee</code>.
     * @param {(module:model/EstimateClaimFee|module:model/EstimateStakeFee|module:model/EstimateUnstakeFee|module:model/EstimateWithdrawFee)} obj The actual instance.
     */
  }, {
    key: "setActualInstance",
    value: function setActualInstance(obj) {
      this.actualInstance = GetStakingEstimationFeeRequest.constructFromObject(obj).getActualInstance();
    }
  }], [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      return new GetStakingEstimationFeeRequest(data);
    }
  }]);
}();
/**
 * @member {module:model/ActivityType} activity_type
 */
_GetStakingEstimationFeeRequest = GetStakingEstimationFeeRequest;
/**
 * Create an instance of GetStakingEstimationFeeRequest from a JSON string.
 * @param {string} json_string JSON string.
 * @return {module:model/GetStakingEstimationFeeRequest} An instance of GetStakingEstimationFeeRequest.
 */
_defineProperty(GetStakingEstimationFeeRequest, "fromJSON", function (json_string) {
  return _GetStakingEstimationFeeRequest.constructFromObject(JSON.parse(json_string));
});
GetStakingEstimationFeeRequest.prototype['activity_type'] = undefined;

/**
 * The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
 * @member {String} request_id
 */
GetStakingEstimationFeeRequest.prototype['request_id'] = undefined;

/**
 * @member {module:model/StakingSource} source
 */
GetStakingEstimationFeeRequest.prototype['source'] = undefined;

/**
 * @member {module:model/StakingPoolId} pool_id
 */
GetStakingEstimationFeeRequest.prototype['pool_id'] = undefined;

/**
 * The amount to withdraw.
 * @member {String} amount
 */
GetStakingEstimationFeeRequest.prototype['amount'] = undefined;

/**
 * @member {module:model/TransactionRequestFee} fee
 */
GetStakingEstimationFeeRequest.prototype['fee'] = undefined;

/**
 * @member {module:model/CreateUnstakeActivityExtra} extra
 */
GetStakingEstimationFeeRequest.prototype['extra'] = undefined;

/**
 * The ID of the staking position. You can retrieve a list of staking positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions).
 * @member {String} staking_id
 */
GetStakingEstimationFeeRequest.prototype['staking_id'] = undefined;
GetStakingEstimationFeeRequest.OneOf = ["EstimateClaimFee", "EstimateStakeFee", "EstimateUnstakeFee", "EstimateWithdrawFee"];
var _default = exports["default"] = GetStakingEstimationFeeRequest;