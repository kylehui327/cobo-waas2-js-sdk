"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _EvmEip1559FeeBasePrice = _interopRequireDefault(require("./EvmEip1559FeeBasePrice"));
var _FeeType = _interopRequireDefault(require("./FeeType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TransactionRequestEvmEip1559Fee model module.
 * @module model/TransactionRequestEvmEip1559Fee
 */
var TransactionRequestEvmEip1559Fee = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TransactionRequestEvmEip1559Fee</code>.
   * The preset properties to limit transaction fee.  In the EIP-1559 fee model, the transaction fee is calculated by multiplying the gas price and the gas units used by the transaction. This can be expressed as: Transaction fee &#x3D; gas price * gas units used. For more information about the EIP-1559 fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).  You can specify the maximum gas fee per gas unit, maximum priority fee per gas unit, and the gas limit to limit the gas price, priority fee per gas unit, gas units used in the transaction.   Switch between the tabs to display the properties for different transaction fee models. 
   * @alias module:model/TransactionRequestEvmEip1559Fee
   * @implements module:model/EvmEip1559FeeBasePrice
   * @param max_fee_per_gas {String} The maximum gas fee per gas unit used on the chain, in wei.
   * @param max_priority_fee_per_gas {String} The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
   * @param fee_type {module:model/FeeType} 
   * @param token_id {String} The token used to pay the transaction fee.
   */
  function TransactionRequestEvmEip1559Fee(max_fee_per_gas, max_priority_fee_per_gas, fee_type, token_id) {
    _classCallCheck(this, TransactionRequestEvmEip1559Fee);
    _EvmEip1559FeeBasePrice["default"].initialize(this);
    TransactionRequestEvmEip1559Fee.initialize(this, max_fee_per_gas, max_priority_fee_per_gas, fee_type, token_id);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(TransactionRequestEvmEip1559Fee, null, [{
    key: "initialize",
    value: function initialize(obj, max_fee_per_gas, max_priority_fee_per_gas, fee_type, token_id) {
      obj['max_fee_per_gas'] = max_fee_per_gas;
      obj['max_priority_fee_per_gas'] = max_priority_fee_per_gas;
      obj['fee_type'] = fee_type;
      obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>TransactionRequestEvmEip1559Fee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionRequestEvmEip1559Fee} obj Optional instance to populate.
     * @return {module:model/TransactionRequestEvmEip1559Fee} The populated <code>TransactionRequestEvmEip1559Fee</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TransactionRequestEvmEip1559Fee();
        _EvmEip1559FeeBasePrice["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('max_fee_per_gas')) {
          obj['max_fee_per_gas'] = _ApiClient["default"].convertToType(data['max_fee_per_gas'], 'String');
        }
        if (data.hasOwnProperty('max_priority_fee_per_gas')) {
          obj['max_priority_fee_per_gas'] = _ApiClient["default"].convertToType(data['max_priority_fee_per_gas'], 'String');
        }
        if (data.hasOwnProperty('fee_type')) {
          obj['fee_type'] = _FeeType["default"].constructFromObject(data['fee_type']);
        }
        if (data.hasOwnProperty('token_id')) {
          obj['token_id'] = _ApiClient["default"].convertToType(data['token_id'], 'String');
        }
        if (data.hasOwnProperty('gas_limit')) {
          obj['gas_limit'] = _ApiClient["default"].convertToType(data['gas_limit'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionRequestEvmEip1559Fee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionRequestEvmEip1559Fee</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(TransactionRequestEvmEip1559Fee.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data.hasOwnProperty(property)) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['max_fee_per_gas'] && !(typeof data['max_fee_per_gas'] === 'string' || data['max_fee_per_gas'] instanceof String)) {
        throw new Error("Expected the field `max_fee_per_gas` to be a primitive type in the JSON string but got " + data['max_fee_per_gas']);
      }
      // ensure the json data is a string
      if (data['max_priority_fee_per_gas'] && !(typeof data['max_priority_fee_per_gas'] === 'string' || data['max_priority_fee_per_gas'] instanceof String)) {
        throw new Error("Expected the field `max_priority_fee_per_gas` to be a primitive type in the JSON string but got " + data['max_priority_fee_per_gas']);
      }
      // ensure the json data is a string
      if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
        throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
      }
      // ensure the json data is a string
      if (data['gas_limit'] && !(typeof data['gas_limit'] === 'string' || data['gas_limit'] instanceof String)) {
        throw new Error("Expected the field `gas_limit` to be a primitive type in the JSON string but got " + data['gas_limit']);
      }
      return true;
    }
  }]);
}();
TransactionRequestEvmEip1559Fee.RequiredProperties = ["max_fee_per_gas", "max_priority_fee_per_gas", "fee_type", "token_id"];

/**
 * The maximum gas fee per gas unit used on the chain, in wei.
 * @member {String} max_fee_per_gas
 */
TransactionRequestEvmEip1559Fee.prototype['max_fee_per_gas'] = undefined;

/**
 * The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
 * @member {String} max_priority_fee_per_gas
 */
TransactionRequestEvmEip1559Fee.prototype['max_priority_fee_per_gas'] = undefined;

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionRequestEvmEip1559Fee.prototype['fee_type'] = undefined;

/**
 * The token used to pay the transaction fee.
 * @member {String} token_id
 */
TransactionRequestEvmEip1559Fee.prototype['token_id'] = undefined;

/**
 * The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
 * @member {String} gas_limit
 */
TransactionRequestEvmEip1559Fee.prototype['gas_limit'] = undefined;

// Implement EvmEip1559FeeBasePrice interface:
/**
 * The maximum gas fee per gas unit used on the chain, in wei.
 * @member {String} max_fee_per_gas
 */
_EvmEip1559FeeBasePrice["default"].prototype['max_fee_per_gas'] = undefined;
/**
 * The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
 * @member {String} max_priority_fee_per_gas
 */
_EvmEip1559FeeBasePrice["default"].prototype['max_priority_fee_per_gas'] = undefined;
var _default = exports["default"] = TransactionRequestEvmEip1559Fee;