"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ActivityType = _interopRequireDefault(require("./ActivityType"));
var _AddressInfo = _interopRequireDefault(require("./AddressInfo"));
var _TransactionBabylonBusinessInfo = _interopRequireDefault(require("./TransactionBabylonBusinessInfo"));
var _TransactionBabylonTxParameters = _interopRequireDefault(require("./TransactionBabylonTxParameters"));
var _TransactionCoreStakeInfo = _interopRequireDefault(require("./TransactionCoreStakeInfo"));
var _TransactionExtraType = _interopRequireDefault(require("./TransactionExtraType"));
var _TransactionExtra;
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The TransactionExtra model module.
 * @module model/TransactionExtra
 */
var TransactionExtra = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TransactionExtra</code>.
   * @alias module:model/TransactionExtra
   * @param {(module:model/TransactionBabylonBusinessInfo|module:model/TransactionBabylonTxParameters|module:model/TransactionCoreStakeInfo)} instance The actual instance to initialize TransactionExtra.
   */
  function TransactionExtra() {
    var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    _classCallCheck(this, TransactionExtra);
    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    _defineProperty(this, "toJSON", function () {
      return this.getActualInstance();
    });
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    var discriminatorValue = instance["extra_type"];
    if (discriminatorValue) {
      switch (discriminatorValue) {
        case "BabylonBusinessInfo":
          this.actualInstance = _TransactionBabylonBusinessInfo["default"].constructFromObject(instance);
          match++;
          break;
        case "BabylonTxParameters":
          this.actualInstance = _TransactionBabylonTxParameters["default"].constructFromObject(instance);
          match++;
          break;
        case "CoreStakeInfo":
          this.actualInstance = _TransactionCoreStakeInfo["default"].constructFromObject(instance);
          match++;
          break;
        default:
          errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
          break;
      }
      return;
    }
    try {
      if (instance instanceof _TransactionBabylonBusinessInfo["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionBabylonBusinessInfo["default"].validateJSON && _TransactionBabylonBusinessInfo["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionBabylonBusinessInfo from JS object
        this.actualInstance = _TransactionBabylonBusinessInfo["default"].constructFromObject(instance);
      } else {
        if (_TransactionBabylonBusinessInfo["default"].constructFromObject(instance)) {
          if (!!_TransactionBabylonBusinessInfo["default"].constructFromObject(instance).toJSON) {
            if (_TransactionBabylonBusinessInfo["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionBabylonBusinessInfo["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionBabylonBusinessInfo["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionBabylonBusinessInfo
      errorMessages.push("Failed to construct TransactionBabylonBusinessInfo: " + err);
    }
    try {
      if (instance instanceof _TransactionBabylonTxParameters["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionBabylonTxParameters["default"].validateJSON && _TransactionBabylonTxParameters["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionBabylonTxParameters from JS object
        this.actualInstance = _TransactionBabylonTxParameters["default"].constructFromObject(instance);
      } else {
        if (_TransactionBabylonTxParameters["default"].constructFromObject(instance)) {
          if (!!_TransactionBabylonTxParameters["default"].constructFromObject(instance).toJSON) {
            if (_TransactionBabylonTxParameters["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionBabylonTxParameters["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionBabylonTxParameters["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionBabylonTxParameters
      errorMessages.push("Failed to construct TransactionBabylonTxParameters: " + err);
    }
    try {
      if (instance instanceof _TransactionCoreStakeInfo["default"]) {
        this.actualInstance = instance;
      } else if (!!_TransactionCoreStakeInfo["default"].validateJSON && _TransactionCoreStakeInfo["default"].validateJSON(instance)) {
        // plain JS object
        // create TransactionCoreStakeInfo from JS object
        this.actualInstance = _TransactionCoreStakeInfo["default"].constructFromObject(instance);
      } else {
        if (_TransactionCoreStakeInfo["default"].constructFromObject(instance)) {
          if (!!_TransactionCoreStakeInfo["default"].constructFromObject(instance).toJSON) {
            if (_TransactionCoreStakeInfo["default"].constructFromObject(instance).toJSON()) {
              this.actualInstance = _TransactionCoreStakeInfo["default"].constructFromObject(instance);
            }
          } else {
            this.actualInstance = _TransactionCoreStakeInfo["default"].constructFromObject(instance);
          }
        }
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into TransactionCoreStakeInfo
      errorMessages.push("Failed to construct TransactionCoreStakeInfo: " + err);
    }

    // if (match > 1) {
    //    throw new Error("Multiple matches found constructing `TransactionExtra` with oneOf schemas TransactionBabylonBusinessInfo, TransactionBabylonTxParameters, TransactionCoreStakeInfo. Input: " + JSON.stringify(instance));
    // } else
    if (match === 0) {
      //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
      //    throw new Error("No match found constructing `TransactionExtra` with oneOf schemas TransactionBabylonBusinessInfo, TransactionBabylonTxParameters, TransactionCoreStakeInfo. Details: " +
      //                    errorMessages.join(", "));
      return;
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>TransactionExtra</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionExtra} obj Optional instance to populate.
   * @return {module:model/TransactionExtra} The populated <code>TransactionExtra</code> instance.
   */
  return _createClass(TransactionExtra, [{
    key: "getActualInstance",
    value:
    /**
     * Gets the actual instance, which can be <code>TransactionBabylonBusinessInfo</code>, <code>TransactionBabylonTxParameters</code>, <code>TransactionCoreStakeInfo</code>.
     * @return {(module:model/TransactionBabylonBusinessInfo|module:model/TransactionBabylonTxParameters|module:model/TransactionCoreStakeInfo)} The actual instance.
     */
    function getActualInstance() {
      return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionBabylonBusinessInfo</code>, <code>TransactionBabylonTxParameters</code>, <code>TransactionCoreStakeInfo</code>.
     * @param {(module:model/TransactionBabylonBusinessInfo|module:model/TransactionBabylonTxParameters|module:model/TransactionCoreStakeInfo)} obj The actual instance.
     */
  }, {
    key: "setActualInstance",
    value: function setActualInstance(obj) {
      this.actualInstance = TransactionExtra.constructFromObject(obj).getActualInstance();
    }
  }], [{
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      return new TransactionExtra(data);
    }
  }]);
}();
/**
 * @member {module:model/TransactionExtraType} extra_type
 */
_TransactionExtra = TransactionExtra;
/**
 * Create an instance of TransactionExtra from a JSON string.
 * @param {string} json_string JSON string.
 * @return {module:model/TransactionExtra} An instance of TransactionExtra.
 */
_defineProperty(TransactionExtra, "fromJSON", function (json_string) {
  return _TransactionExtra.constructFromObject(JSON.parse(json_string));
});
TransactionExtra.prototype['extra_type'] = undefined;

/**
 * @member {module:model/AddressInfo} babylon_address_info
 */
TransactionExtra.prototype['babylon_address_info'] = undefined;

/**
 * @member {module:model/AddressInfo} btc_address_info
 */
TransactionExtra.prototype['btc_address_info'] = undefined;

/**
 * The original staking amount.
 * @member {String} stake_amount
 */
TransactionExtra.prototype['stake_amount'] = undefined;

/**
 * The public key of the finality provider.
 * @member {String} finality_provider_public_key
 */
TransactionExtra.prototype['finality_provider_public_key'] = undefined;

/**
 * The number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
 * @member {Number} stake_block_time
 */
TransactionExtra.prototype['stake_block_time'] = undefined;

/**
 * The version of Babylon global parameters.
 * @member {Number} param_version
 */
TransactionExtra.prototype['param_version'] = undefined;

/**
 * @member {module:model/ActivityType} withdraw_from_type
 */
TransactionExtra.prototype['withdraw_from_type'] = undefined;

/**
 * @member {module:model/ActivityType} slash_from_type
 */
TransactionExtra.prototype['slash_from_type'] = undefined;

/**
 * The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
 * @member {Number} timelock
 */
TransactionExtra.prototype['timelock'] = undefined;

/**
 * The change address on the Bitcoin chain. If not provided, the source wallet's address will be used as the change address.
 * @member {String} change_address
 */
TransactionExtra.prototype['change_address'] = undefined;

/**
 * The validator's EVM address.
 * @member {String} validator_address
 */
TransactionExtra.prototype['validator_address'] = undefined;

/**
 * The EVM address used to receive staking rewards.
 * @member {String} reward_address
 */
TransactionExtra.prototype['reward_address'] = undefined;
TransactionExtra.OneOf = ["TransactionBabylonBusinessInfo", "TransactionBabylonTxParameters", "TransactionCoreStakeInfo"];
var _default = exports["default"] = TransactionExtra;