"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _GetApiKeyInfo200Response = _interopRequireDefault(require("../model/GetApiKeyInfo200Response"));
var _ListCallbackMessages200Response = _interopRequireDefault(require("../model/ListCallbackMessages200Response"));
var _RetryCallbackMessage201Response = _interopRequireDefault(require("../model/RetryCallbackMessage201Response"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Developers service.
* @module api/DevelopersApi
*/
var DevelopersApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DevelopersApi. 
  * @alias module:api/DevelopersApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevelopersApi(apiClient) {
    _classCallCheck(this, DevelopersApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Get API key information
   * This operation retrieves the details of the API key that you are using.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetApiKeyInfo200Response} and HTTP response
   */
  return _createClass(DevelopersApi, [{
    key: "getApiKeyInfoWithHttpInfo",
    value: function getApiKeyInfoWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetApiKeyInfo200Response["default"];
      return this.apiClient.callApi('/developers/api_key_info', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get API key information
     * This operation retrieves the details of the API key that you are using.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetApiKeyInfo200Response}
     */
  }, {
    key: "getApiKeyInfo",
    value: function getApiKeyInfo() {
      return this.getApiKeyInfoWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all callback messages
     * This operation retrieves all the callback messages in your organization.  For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param {Object} opts Optional parameters
     * @param {String} [callback_message_ids] A list of callback message IDs, separated by commas.
     * @param {String} [request_ids] A list of request IDs, separated by commas. The request ID is provided by you and must be unique within your organization.
     * @param {String} [transaction_ids] A list of transaction IDs, separated by commas.
     * @param {String} [wallet_ids] A list of wallet IDs, separated by commas.
     * @param {module:model/String} [status] The callback message status. Possible values include `Approved`, `Denied`, and `Failed`.
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCallbackMessages200Response} and HTTP response
     */
  }, {
    key: "listCallbackMessagesWithHttpInfo",
    value: function listCallbackMessagesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'callback_message_ids': opts['callback_message_ids'],
        'request_ids': opts['request_ids'],
        'transaction_ids': opts['transaction_ids'],
        'wallet_ids': opts['wallet_ids'],
        'status': opts['status'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListCallbackMessages200Response["default"];
      return this.apiClient.callApi('/developers/callback_messages', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all callback messages
     * This operation retrieves all the callback messages in your organization.  For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param {Object} opts Optional parameters
     * @param {String} opts.callback_message_ids A list of callback message IDs, separated by commas.
     * @param {String} opts.request_ids A list of request IDs, separated by commas. The request ID is provided by you and must be unique within your organization.
     * @param {String} opts.transaction_ids A list of transaction IDs, separated by commas.
     * @param {String} opts.wallet_ids A list of wallet IDs, separated by commas.
     * @param {module:model/String} opts.status The callback message status. Possible values include `Approved`, `Denied`, and `Failed`.
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCallbackMessages200Response}
     */
  }, {
    key: "listCallbackMessages",
    value: function listCallbackMessages(opts) {
      return this.listCallbackMessagesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retry callback message
     * This operation resends a callback message that failed previously.  If your callback endpoint doesn't respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be `Failed`. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param {String} message_id The callback message ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RetryCallbackMessage201Response} and HTTP response
     */
  }, {
    key: "retryCallbackMessageWithHttpInfo",
    value: function retryCallbackMessageWithHttpInfo(message_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'message_id' is set
      if (message_id === undefined || message_id === null) {
        throw new Error("Missing the required parameter 'message_id' when calling retryCallbackMessage");
      }
      var pathParams = {
        'message_id': message_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RetryCallbackMessage201Response["default"];
      return this.apiClient.callApi('/developers/callback_messages/{message_id}/retry', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retry callback message
     * This operation resends a callback message that failed previously.  If your callback endpoint doesn't respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be `Failed`. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages). 
     * @param {String} message_id The callback message ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RetryCallbackMessage201Response}
     */
  }, {
    key: "retryCallbackMessage",
    value: function retryCallbackMessage(message_id) {
      return this.retryCallbackMessageWithHttpInfo(message_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();