"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateWebhookEndpointRequest = _interopRequireDefault(require("../model/CreateWebhookEndpointRequest"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _ListWebhookEndpoints200Response = _interopRequireDefault(require("../model/ListWebhookEndpoints200Response"));
var _ListWebhookEventDefinitions200ResponseInner = _interopRequireDefault(require("../model/ListWebhookEventDefinitions200ResponseInner"));
var _ListWebhookEventLogs200Response = _interopRequireDefault(require("../model/ListWebhookEventLogs200Response"));
var _ListWebhookEvents200Response = _interopRequireDefault(require("../model/ListWebhookEvents200Response"));
var _RetryWebhookEventById201Response = _interopRequireDefault(require("../model/RetryWebhookEventById201Response"));
var _TriggerTestWebhookEvent201Response = _interopRequireDefault(require("../model/TriggerTestWebhookEvent201Response"));
var _TriggerTestWebhookEventRequest = _interopRequireDefault(require("../model/TriggerTestWebhookEventRequest"));
var _UpdateWebhookEndpointByIdRequest = _interopRequireDefault(require("../model/UpdateWebhookEndpointByIdRequest"));
var _WebhookEndpoint = _interopRequireDefault(require("../model/WebhookEndpoint"));
var _WebhookEndpointStatus = _interopRequireDefault(require("../model/WebhookEndpointStatus"));
var _WebhookEvent = _interopRequireDefault(require("../model/WebhookEvent"));
var _WebhookEventStatus = _interopRequireDefault(require("../model/WebhookEventStatus"));
var _WebhookEventType = _interopRequireDefault(require("../model/WebhookEventType"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* DevelopersWebhooks service.
* @module api/DevelopersWebhooksApi
*/
var DevelopersWebhooksApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DevelopersWebhooksApi. 
  * @alias module:api/DevelopersWebhooksApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevelopersWebhooksApi(apiClient) {
    _classCallCheck(this, DevelopersWebhooksApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Register webhook endpoint
   * This operation registers a new webhook endpoint for your organization.
   * @param {Object} opts Optional parameters
   * @param {module:model/CreateWebhookEndpointRequest} [CreateWebhookEndpointRequest] The request body to register a webhook endpoint.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebhookEndpoint} and HTTP response
   */
  return _createClass(DevelopersWebhooksApi, [{
    key: "createWebhookEndpointWithHttpInfo",
    value: function createWebhookEndpointWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['CreateWebhookEndpointRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WebhookEndpoint["default"];
      return this.apiClient.callApi('/webhooks/endpoints', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Register webhook endpoint
     * This operation registers a new webhook endpoint for your organization.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebhookEndpointRequest} opts.CreateWebhookEndpointRequest The request body to register a webhook endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebhookEndpoint}
     */
  }, {
    key: "createWebhookEndpoint",
    value: function createWebhookEndpoint(opts) {
      return this.createWebhookEndpointWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get webhook endpoint information
     * This operation retrieves the information of a specified webhook endpoint.
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebhookEndpoint} and HTTP response
     */
  }, {
    key: "getWebhookEndpointByIdWithHttpInfo",
    value: function getWebhookEndpointByIdWithHttpInfo(endpoint_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'endpoint_id' is set
      if (endpoint_id === undefined || endpoint_id === null) {
        throw new Error("Missing the required parameter 'endpoint_id' when calling getWebhookEndpointById");
      }
      var pathParams = {
        'endpoint_id': endpoint_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookEndpoint["default"];
      return this.apiClient.callApi('/webhooks/endpoints/{endpoint_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get webhook endpoint information
     * This operation retrieves the information of a specified webhook endpoint.
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebhookEndpoint}
     */
  }, {
    key: "getWebhookEndpointById",
    value: function getWebhookEndpointById(endpoint_id) {
      return this.getWebhookEndpointByIdWithHttpInfo(endpoint_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retrieve event information
     * This operation retrieves the information of a webhook event by the event ID. 
     * @param {String} event_id The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebhookEvent} and HTTP response
     */
  }, {
    key: "getWebhookEventByIdWithHttpInfo",
    value: function getWebhookEventByIdWithHttpInfo(event_id, endpoint_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'event_id' is set
      if (event_id === undefined || event_id === null) {
        throw new Error("Missing the required parameter 'event_id' when calling getWebhookEventById");
      }
      // verify the required parameter 'endpoint_id' is set
      if (endpoint_id === undefined || endpoint_id === null) {
        throw new Error("Missing the required parameter 'endpoint_id' when calling getWebhookEventById");
      }
      var pathParams = {
        'event_id': event_id,
        'endpoint_id': endpoint_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookEvent["default"];
      return this.apiClient.callApi('/webhooks/endpoints/{endpoint_id}/events/{event_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve event information
     * This operation retrieves the information of a webhook event by the event ID. 
     * @param {String} event_id The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebhookEvent}
     */
  }, {
    key: "getWebhookEventById",
    value: function getWebhookEventById(event_id, endpoint_id) {
      return this.getWebhookEventByIdWithHttpInfo(event_id, endpoint_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List webhook endpoints
     * This operation retrieves the information of all webhook endpoints registered under your organization. You can filter the result by endpoint status and the subscribed event type.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookEndpointStatus} [status] 
     * @param {module:model/WebhookEventType} [event_type] 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhookEndpoints200Response} and HTTP response
     */
  }, {
    key: "listWebhookEndpointsWithHttpInfo",
    value: function listWebhookEndpointsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'status': opts['status'],
        'event_type': opts['event_type'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListWebhookEndpoints200Response["default"];
      return this.apiClient.callApi('/webhooks/endpoints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List webhook endpoints
     * This operation retrieves the information of all webhook endpoints registered under your organization. You can filter the result by endpoint status and the subscribed event type.
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookEndpointStatus} opts.status 
     * @param {module:model/WebhookEventType} opts.event_type 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhookEndpoints200Response}
     */
  }, {
    key: "listWebhookEndpoints",
    value: function listWebhookEndpoints(opts) {
      return this.listWebhookEndpointsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get webhook event types
     * This operation retrieves all supported webhook event types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ListWebhookEventDefinitions200ResponseInner>} and HTTP response
     */
  }, {
    key: "listWebhookEventDefinitionsWithHttpInfo",
    value: function listWebhookEventDefinitionsWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ListWebhookEventDefinitions200ResponseInner["default"]];
      return this.apiClient.callApi('/webhooks/events/definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get webhook event types
     * This operation retrieves all supported webhook event types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ListWebhookEventDefinitions200ResponseInner>}
     */
  }, {
    key: "listWebhookEventDefinitions",
    value: function listWebhookEventDefinitions() {
      return this.listWebhookEventDefinitionsWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List webhook event logs
     * This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log. 
     * @param {String} event_id The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhookEventLogs200Response} and HTTP response
     */
  }, {
    key: "listWebhookEventLogsWithHttpInfo",
    value: function listWebhookEventLogsWithHttpInfo(event_id, endpoint_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'event_id' is set
      if (event_id === undefined || event_id === null) {
        throw new Error("Missing the required parameter 'event_id' when calling listWebhookEventLogs");
      }
      // verify the required parameter 'endpoint_id' is set
      if (endpoint_id === undefined || endpoint_id === null) {
        throw new Error("Missing the required parameter 'endpoint_id' when calling listWebhookEventLogs");
      }
      var pathParams = {
        'event_id': event_id,
        'endpoint_id': endpoint_id
      };
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListWebhookEventLogs200Response["default"];
      return this.apiClient.callApi('/webhooks/endpoints/{endpoint_id}/events/{event_id}/logs', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List webhook event logs
     * This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log. 
     * @param {String} event_id The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhookEventLogs200Response}
     */
  }, {
    key: "listWebhookEventLogs",
    value: function listWebhookEventLogs(event_id, endpoint_id, opts) {
      return this.listWebhookEventLogsWithHttpInfo(event_id, endpoint_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all webhook events
     * This operation retrieves a list of webhook events that have occurred within the last 30 days.  <Note>The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.</Note> 
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookEventStatus} [status] 
     * @param {module:model/WebhookEventType} [type] 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhookEvents200Response} and HTTP response
     */
  }, {
    key: "listWebhookEventsWithHttpInfo",
    value: function listWebhookEventsWithHttpInfo(endpoint_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'endpoint_id' is set
      if (endpoint_id === undefined || endpoint_id === null) {
        throw new Error("Missing the required parameter 'endpoint_id' when calling listWebhookEvents");
      }
      var pathParams = {
        'endpoint_id': endpoint_id
      };
      var queryParams = {
        'status': opts['status'],
        'type': opts['type'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListWebhookEvents200Response["default"];
      return this.apiClient.callApi('/webhooks/endpoints/{endpoint_id}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all webhook events
     * This operation retrieves a list of webhook events that have occurred within the last 30 days.  <Note>The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.</Note> 
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookEventStatus} opts.status 
     * @param {module:model/WebhookEventType} opts.type 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhookEvents200Response}
     */
  }, {
    key: "listWebhookEvents",
    value: function listWebhookEvents(endpoint_id, opts) {
      return this.listWebhookEventsWithHttpInfo(endpoint_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Retry event
     * This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status. 
     * @param {String} event_id The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RetryWebhookEventById201Response} and HTTP response
     */
  }, {
    key: "retryWebhookEventByIdWithHttpInfo",
    value: function retryWebhookEventByIdWithHttpInfo(event_id, endpoint_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'event_id' is set
      if (event_id === undefined || event_id === null) {
        throw new Error("Missing the required parameter 'event_id' when calling retryWebhookEventById");
      }
      // verify the required parameter 'endpoint_id' is set
      if (endpoint_id === undefined || endpoint_id === null) {
        throw new Error("Missing the required parameter 'endpoint_id' when calling retryWebhookEventById");
      }
      var pathParams = {
        'event_id': event_id,
        'endpoint_id': endpoint_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _RetryWebhookEventById201Response["default"];
      return this.apiClient.callApi('/webhooks/endpoints/{endpoint_id}/events/{event_id}/retry', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retry event
     * This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status. 
     * @param {String} event_id The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RetryWebhookEventById201Response}
     */
  }, {
    key: "retryWebhookEventById",
    value: function retryWebhookEventById(event_id, endpoint_id) {
      return this.retryWebhookEventByIdWithHttpInfo(event_id, endpoint_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Trigger test event
     * This operation tests the functionality of your webhook endpoint by triggering a test webhook event. The test event will be sent to all the endpoints you have registered on Cobo Portal.  You only need to provide the event type. By default, the payload contains dummy data with no impact on your real business transactions or activities. You can optionally provide the `override_data` property to customize the payload. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TriggerTestWebhookEventRequest} [TriggerTestWebhookEventRequest] The request body used to trigger a test webhook event. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TriggerTestWebhookEvent201Response} and HTTP response
     */
  }, {
    key: "triggerTestWebhookEventWithHttpInfo",
    value: function triggerTestWebhookEventWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['TriggerTestWebhookEventRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TriggerTestWebhookEvent201Response["default"];
      return this.apiClient.callApi('/webhooks/events/trigger', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Trigger test event
     * This operation tests the functionality of your webhook endpoint by triggering a test webhook event. The test event will be sent to all the endpoints you have registered on Cobo Portal.  You only need to provide the event type. By default, the payload contains dummy data with no impact on your real business transactions or activities. You can optionally provide the `override_data` property to customize the payload. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TriggerTestWebhookEventRequest} opts.TriggerTestWebhookEventRequest The request body used to trigger a test webhook event. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TriggerTestWebhookEvent201Response}
     */
  }, {
    key: "triggerTestWebhookEvent",
    value: function triggerTestWebhookEvent(opts) {
      return this.triggerTestWebhookEventWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update webhook endpoint
     * This operation updates the information of a specified webhook endpoint.
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWebhookEndpointByIdRequest} [UpdateWebhookEndpointByIdRequest] The request body to update a webhook endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebhookEndpoint} and HTTP response
     */
  }, {
    key: "updateWebhookEndpointByIdWithHttpInfo",
    value: function updateWebhookEndpointByIdWithHttpInfo(endpoint_id, opts) {
      opts = opts || {};
      var postBody = opts['UpdateWebhookEndpointByIdRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'endpoint_id' is set
      if (endpoint_id === undefined || endpoint_id === null) {
        throw new Error("Missing the required parameter 'endpoint_id' when calling updateWebhookEndpointById");
      }
      var pathParams = {
        'endpoint_id': endpoint_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WebhookEndpoint["default"];
      return this.apiClient.callApi('/webhooks/endpoints/{endpoint_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update webhook endpoint
     * This operation updates the information of a specified webhook endpoint.
     * @param {String} endpoint_id The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWebhookEndpointByIdRequest} opts.UpdateWebhookEndpointByIdRequest The request body to update a webhook endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebhookEndpoint}
     */
  }, {
    key: "updateWebhookEndpointById",
    value: function updateWebhookEndpointById(endpoint_id, opts) {
      return this.updateWebhookEndpointByIdWithHttpInfo(endpoint_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();