"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _ExchangePermissionToken201Response = _interopRequireDefault(require("../model/ExchangePermissionToken201Response"));
var _ExchangePermissionTokenRequest = _interopRequireDefault(require("../model/ExchangePermissionTokenRequest"));
var _GetToken2XXResponse = _interopRequireDefault(require("../model/GetToken2XXResponse"));
var _GetToken4XXResponse = _interopRequireDefault(require("../model/GetToken4XXResponse"));
var _RefreshPermissionTokenRequest = _interopRequireDefault(require("../model/RefreshPermissionTokenRequest"));
var _RefreshToken2XXResponse = _interopRequireDefault(require("../model/RefreshToken2XXResponse"));
var _RefreshTokenRequest = _interopRequireDefault(require("../model/RefreshTokenRequest"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* OAuth service.
* @module api/OAuthApi
*/
var OAuthApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new OAuthApi. 
  * @alias module:api/OAuthApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function OAuthApi(apiClient) {
    _classCallCheck(this, OAuthApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Get Access Token
   * This operation acquires an Access Token and a Refresh Token for the [Checkout SDK](https://www.cobo.com/developers/v2_cn/payments/checkout-sdk).  For security purposes, an Access Token expires after a certain period. Once it expires, you need to call the [Refresh Access Token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-access-token) operation to get a new Access Token and a new Refresh Token. 
   * @param {module:model/ExchangePermissionTokenRequest} ExchangePermissionTokenRequest The request body to acquire an Access Token.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExchangePermissionToken201Response} and HTTP response
   */
  return _createClass(OAuthApi, [{
    key: "exchangePermissionTokenWithHttpInfo",
    value: function exchangePermissionTokenWithHttpInfo(ExchangePermissionTokenRequest) {
      var postBody = ExchangePermissionTokenRequest;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'ExchangePermissionTokenRequest' is set
      if (ExchangePermissionTokenRequest === undefined || ExchangePermissionTokenRequest === null) {
        throw new Error("Missing the required parameter 'ExchangePermissionTokenRequest' when calling exchangePermissionToken");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ExchangePermissionToken201Response["default"];
      return this.apiClient.callApi('/oauth/permission_token/exchange', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Access Token
     * This operation acquires an Access Token and a Refresh Token for the [Checkout SDK](https://www.cobo.com/developers/v2_cn/payments/checkout-sdk).  For security purposes, an Access Token expires after a certain period. Once it expires, you need to call the [Refresh Access Token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-access-token) operation to get a new Access Token and a new Refresh Token. 
     * @param {module:model/ExchangePermissionTokenRequest} ExchangePermissionTokenRequest The request body to acquire an Access Token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExchangePermissionToken201Response}
     */
  }, {
    key: "exchangePermissionToken",
    value: function exchangePermissionToken(ExchangePermissionTokenRequest) {
      return this.exchangePermissionTokenWithHttpInfo(ExchangePermissionTokenRequest).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Org Access Token
     * <Note>This operation is only applicable to Cobo Portal App developers. To call this operation, you need to use the Cobo OAuth authentication method that requires an app key.</Note> This operation allows Cobo Portal Apps to get an Org Access Token and a Refresh Token with a specified client ID, organization ID, and grant type.   Access tokens allow the app to signal to the WaaS service that it has received permission to access specific resources of the app user's [organization](https://manuals.cobo.com/en/portal/organization/introduction). Once the app has been granted permission by the organization's admin, it can use this operation to obtain both an Org Access Token and a Refresh Token.  For security purposes, Org Access Tokens expire after a certain period. Once they expire, the app needs to call [Refresh token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-org-access-token) to get a new Org Access Token and a new Refresh Token.  
     * @param {String} client_id The client ID, a unique identifier to distinguish Cobo Portal Apps. You can get the client ID by retrieving the manifest file after publishing the app.
     * @param {String} org_id Organization ID, a unique identifier to distinguish different organizations. You can get the organization ID from the callback message sent to the URL that was configured in the manifest file.
     * @param {String} grant_type The OAuth grant type. Set the value as `org_implicit`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetToken2XXResponse} and HTTP response
     */
  }, {
    key: "getTokenWithHttpInfo",
    value: function getTokenWithHttpInfo(client_id, org_id, grant_type) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'client_id' is set
      if (client_id === undefined || client_id === null) {
        throw new Error("Missing the required parameter 'client_id' when calling getToken");
      }
      // verify the required parameter 'org_id' is set
      if (org_id === undefined || org_id === null) {
        throw new Error("Missing the required parameter 'org_id' when calling getToken");
      }
      // verify the required parameter 'grant_type' is set
      if (grant_type === undefined || grant_type === null) {
        throw new Error("Missing the required parameter 'grant_type' when calling getToken");
      }
      var pathParams = {};
      var queryParams = {
        'client_id': client_id,
        'org_id': org_id,
        'grant_type': grant_type
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetToken2XXResponse["default"];
      return this.apiClient.callApi('/oauth/token', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Org Access Token
     * <Note>This operation is only applicable to Cobo Portal App developers. To call this operation, you need to use the Cobo OAuth authentication method that requires an app key.</Note> This operation allows Cobo Portal Apps to get an Org Access Token and a Refresh Token with a specified client ID, organization ID, and grant type.   Access tokens allow the app to signal to the WaaS service that it has received permission to access specific resources of the app user's [organization](https://manuals.cobo.com/en/portal/organization/introduction). Once the app has been granted permission by the organization's admin, it can use this operation to obtain both an Org Access Token and a Refresh Token.  For security purposes, Org Access Tokens expire after a certain period. Once they expire, the app needs to call [Refresh token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-org-access-token) to get a new Org Access Token and a new Refresh Token.  
     * @param {String} client_id The client ID, a unique identifier to distinguish Cobo Portal Apps. You can get the client ID by retrieving the manifest file after publishing the app.
     * @param {String} org_id Organization ID, a unique identifier to distinguish different organizations. You can get the organization ID from the callback message sent to the URL that was configured in the manifest file.
     * @param {String} grant_type The OAuth grant type. Set the value as `org_implicit`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetToken2XXResponse}
     */
  }, {
    key: "getToken",
    value: function getToken(client_id, org_id, grant_type) {
      return this.getTokenWithHttpInfo(client_id, org_id, grant_type).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Refresh Access Token
     * This operation refreshes the Access Token and Refresh Token for the [Checkout SDK](https://www.cobo.com/developers/v2_cn/payments/checkout-sdk).  For security purposes, an Access Token expires after a certain period. Once it expires, you need to call this operation to get a new Access Token and Refresh Token. 
     * @param {module:model/RefreshPermissionTokenRequest} RefreshPermissionTokenRequest The request body to refresh the Access Token and the Refresh Token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ExchangePermissionToken201Response} and HTTP response
     */
  }, {
    key: "refreshPermissionTokenWithHttpInfo",
    value: function refreshPermissionTokenWithHttpInfo(RefreshPermissionTokenRequest) {
      var postBody = RefreshPermissionTokenRequest;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'RefreshPermissionTokenRequest' is set
      if (RefreshPermissionTokenRequest === undefined || RefreshPermissionTokenRequest === null) {
        throw new Error("Missing the required parameter 'RefreshPermissionTokenRequest' when calling refreshPermissionToken");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ExchangePermissionToken201Response["default"];
      return this.apiClient.callApi('/oauth/permission_token/refresh', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Refresh Access Token
     * This operation refreshes the Access Token and Refresh Token for the [Checkout SDK](https://www.cobo.com/developers/v2_cn/payments/checkout-sdk).  For security purposes, an Access Token expires after a certain period. Once it expires, you need to call this operation to get a new Access Token and Refresh Token. 
     * @param {module:model/RefreshPermissionTokenRequest} RefreshPermissionTokenRequest The request body to refresh the Access Token and the Refresh Token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ExchangePermissionToken201Response}
     */
  }, {
    key: "refreshPermissionToken",
    value: function refreshPermissionToken(RefreshPermissionTokenRequest) {
      return this.refreshPermissionTokenWithHttpInfo(RefreshPermissionTokenRequest).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Refresh Org Access Token
     * <Note>This operation is only applicable to Cobo Portal Apps developers. To call this operation, you need to use the Cobo OAuth authentication method that requires an app key.</Note> This operation allows Cobo Portal Apps to obtain a new Org Access Token with a specified client ID, grant type and a Refresh Token.   For security purposes, Org Access Tokens expire after a certain period. Once they expire, the app needs to call this operation to get a new Org Access Token and a new Refresh Token.  
     * @param {module:model/RefreshTokenRequest} RefreshTokenRequest The request body for refreshing an Org Access Token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RefreshToken2XXResponse} and HTTP response
     */
  }, {
    key: "refreshTokenWithHttpInfo",
    value: function refreshTokenWithHttpInfo(RefreshTokenRequest) {
      var postBody = RefreshTokenRequest;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'RefreshTokenRequest' is set
      if (RefreshTokenRequest === undefined || RefreshTokenRequest === null) {
        throw new Error("Missing the required parameter 'RefreshTokenRequest' when calling refreshToken");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RefreshToken2XXResponse["default"];
      return this.apiClient.callApi('/oauth/token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Refresh Org Access Token
     * <Note>This operation is only applicable to Cobo Portal Apps developers. To call this operation, you need to use the Cobo OAuth authentication method that requires an app key.</Note> This operation allows Cobo Portal Apps to obtain a new Org Access Token with a specified client ID, grant type and a Refresh Token.   For security purposes, Org Access Tokens expire after a certain period. Once they expire, the app needs to call this operation to get a new Org Access Token and a new Refresh Token.  
     * @param {module:model/RefreshTokenRequest} RefreshTokenRequest The request body for refreshing an Org Access Token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RefreshToken2XXResponse}
     */
  }, {
    key: "refreshToken",
    value: function refreshToken(RefreshTokenRequest) {
      return this.refreshTokenWithHttpInfo(RefreshTokenRequest).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();