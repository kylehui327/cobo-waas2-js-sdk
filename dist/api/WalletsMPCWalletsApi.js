"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateKeyShareHolderGroupRequest = _interopRequireDefault(require("../model/CreateKeyShareHolderGroupRequest"));
var _CreateMpcProjectRequest = _interopRequireDefault(require("../model/CreateMpcProjectRequest"));
var _CreateMpcVaultRequest = _interopRequireDefault(require("../model/CreateMpcVaultRequest"));
var _CreateTssRequestRequest = _interopRequireDefault(require("../model/CreateTssRequestRequest"));
var _DeleteKeyShareHolderGroupById201Response = _interopRequireDefault(require("../model/DeleteKeyShareHolderGroupById201Response"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _KeyShareHolder = _interopRequireDefault(require("../model/KeyShareHolder"));
var _KeyShareHolderGroup = _interopRequireDefault(require("../model/KeyShareHolderGroup"));
var _KeyShareHolderGroupType = _interopRequireDefault(require("../model/KeyShareHolderGroupType"));
var _ListKeyShareHolderGroups200Response = _interopRequireDefault(require("../model/ListKeyShareHolderGroups200Response"));
var _ListKeyShareHolders200Response = _interopRequireDefault(require("../model/ListKeyShareHolders200Response"));
var _ListMpcProjects200Response = _interopRequireDefault(require("../model/ListMpcProjects200Response"));
var _ListMpcVaults200Response = _interopRequireDefault(require("../model/ListMpcVaults200Response"));
var _ListTssRequests200Response = _interopRequireDefault(require("../model/ListTssRequests200Response"));
var _MPCProject = _interopRequireDefault(require("../model/MPCProject"));
var _MPCVault = _interopRequireDefault(require("../model/MPCVault"));
var _MPCVaultType = _interopRequireDefault(require("../model/MPCVaultType"));
var _TSSRequest = _interopRequireDefault(require("../model/TSSRequest"));
var _UpdateKeyShareHolderGroupByIdRequest = _interopRequireDefault(require("../model/UpdateKeyShareHolderGroupByIdRequest"));
var _UpdateMpcProjectByIdRequest = _interopRequireDefault(require("../model/UpdateMpcProjectByIdRequest"));
var _UpdateMpcVaultByIdRequest = _interopRequireDefault(require("../model/UpdateMpcVaultByIdRequest"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* WalletsMPCWallets service.
* @module api/WalletsMPCWalletsApi
*/
var WalletsMPCWalletsApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new WalletsMPCWalletsApi. 
  * @alias module:api/WalletsMPCWalletsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function WalletsMPCWalletsApi(apiClient) {
    _classCallCheck(this, WalletsMPCWalletsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Cancel TSS request
   * This operation cancels a TSS request. 
   * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
   * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
   */
  return _createClass(WalletsMPCWalletsApi, [{
    key: "cancelTssRequestByIdWithHttpInfo",
    value: function cancelTssRequestByIdWithHttpInfo(vault_id, tss_request_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling cancelTssRequestById");
      }
      // verify the required parameter 'tss_request_id' is set
      if (tss_request_id === undefined || tss_request_id === null) {
        throw new Error("Missing the required parameter 'tss_request_id' when calling cancelTssRequestById");
      }
      var pathParams = {
        'vault_id': vault_id,
        'tss_request_id': tss_request_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TSSRequest["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
  }, {
    key: "cancelTssRequestById",
    value: function cancelTssRequestById(vault_id, tss_request_id) {
      return this.cancelTssRequestByIdWithHttpInfo(vault_id, tss_request_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create key share holder group
     * This operation creates a key share holder group for a specified vault. <Note>This operation will not return the `tss_key_share_groups` property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you've completed the previous actions.</Note> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyShareHolderGroupRequest} [CreateKeyShareHolderGroupRequest] The request body to create a key share holder group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
  }, {
    key: "createKeyShareHolderGroupWithHttpInfo",
    value: function createKeyShareHolderGroupWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      var postBody = opts['CreateKeyShareHolderGroupRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling createKeyShareHolderGroup");
      }
      var pathParams = {
        'vault_id': vault_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KeyShareHolderGroup["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/key_share_holder_groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create key share holder group
     * This operation creates a key share holder group for a specified vault. <Note>This operation will not return the `tss_key_share_groups` property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you've completed the previous actions.</Note> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyShareHolderGroupRequest} opts.CreateKeyShareHolderGroupRequest The request body to create a key share holder group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
  }, {
    key: "createKeyShareHolderGroup",
    value: function createKeyShareHolderGroup(vault_id, opts) {
      return this.createKeyShareHolderGroupWithHttpInfo(vault_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create project
     * This operation creates a project.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} [CreateMpcProjectRequest] The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
  }, {
    key: "createMpcProjectWithHttpInfo",
    value: function createMpcProjectWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['CreateMpcProjectRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MPCProject["default"];
      return this.apiClient.callApi('/wallets/mpc/projects', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create project
     * This operation creates a project.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} opts.CreateMpcProjectRequest The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
  }, {
    key: "createMpcProject",
    value: function createMpcProject(opts) {
      return this.createMpcProjectWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create vault
     * This operation creates a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} [CreateMpcVaultRequest] The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
  }, {
    key: "createMpcVaultWithHttpInfo",
    value: function createMpcVaultWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['CreateMpcVaultRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MPCVault["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create vault
     * This operation creates a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} opts.CreateMpcVaultRequest The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
  }, {
    key: "createMpcVault",
    value: function createMpcVault(opts) {
      return this.createMpcVaultWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} [CreateTssRequestRequest] The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
  }, {
    key: "createTssRequestWithHttpInfo",
    value: function createTssRequestWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      var postBody = opts['CreateTssRequestRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling createTssRequest");
      }
      var pathParams = {
        'vault_id': vault_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TSSRequest["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/tss_requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} opts.CreateTssRequestRequest The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
  }, {
    key: "createTssRequest",
    value: function createTssRequest(vault_id, opts) {
      return this.createTssRequestWithHttpInfo(vault_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteKeyShareHolderGroupById201Response} and HTTP response
     */
  }, {
    key: "deleteKeyShareHolderGroupByIdWithHttpInfo",
    value: function deleteKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling deleteKeyShareHolderGroupById");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling deleteKeyShareHolderGroupById");
      }
      var pathParams = {
        'vault_id': vault_id,
        'key_share_holder_group_id': key_share_holder_group_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DeleteKeyShareHolderGroupById201Response["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteKeyShareHolderGroupById201Response}
     */
  }, {
    key: "deleteKeyShareHolderGroupById",
    value: function deleteKeyShareHolderGroupById(vault_id, key_share_holder_group_id) {
      return this.deleteKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get key share holder information
     * This operation retrieves detailed information about a specified key share holder. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_node_id The TSS Node ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolder} and HTTP response
     */
  }, {
    key: "getKeyShareHolderByTssNodeIdWithHttpInfo",
    value: function getKeyShareHolderByTssNodeIdWithHttpInfo(vault_id, tss_node_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getKeyShareHolderByTssNodeId");
      }
      // verify the required parameter 'tss_node_id' is set
      if (tss_node_id === undefined || tss_node_id === null) {
        throw new Error("Missing the required parameter 'tss_node_id' when calling getKeyShareHolderByTssNodeId");
      }
      var pathParams = {
        'vault_id': vault_id,
        'tss_node_id': tss_node_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _KeyShareHolder["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/key_share_holders/{tss_node_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get key share holder information
     * This operation retrieves detailed information about a specified key share holder. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_node_id The TSS Node ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolder}
     */
  }, {
    key: "getKeyShareHolderByTssNodeId",
    value: function getKeyShareHolderByTssNodeId(vault_id, tss_node_id) {
      return this.getKeyShareHolderByTssNodeIdWithHttpInfo(vault_id, tss_node_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
  }, {
    key: "getKeyShareHolderGroupByIdWithHttpInfo",
    value: function getKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getKeyShareHolderGroupById");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling getKeyShareHolderGroupById");
      }
      var pathParams = {
        'vault_id': vault_id,
        'key_share_holder_group_id': key_share_holder_group_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _KeyShareHolderGroup["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
  }, {
    key: "getKeyShareHolderGroupById",
    value: function getKeyShareHolderGroupById(vault_id, key_share_holder_group_id) {
      return this.getKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get project information
     * This operation retrieves detailed information about a project. <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
  }, {
    key: "getMpcProjectByIdWithHttpInfo",
    value: function getMpcProjectByIdWithHttpInfo(project_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'project_id' is set
      if (project_id === undefined || project_id === null) {
        throw new Error("Missing the required parameter 'project_id' when calling getMpcProjectById");
      }
      var pathParams = {
        'project_id': project_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _MPCProject["default"];
      return this.apiClient.callApi('/wallets/mpc/projects/{project_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get project information
     * This operation retrieves detailed information about a project. <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
  }, {
    key: "getMpcProjectById",
    value: function getMpcProjectById(project_id) {
      return this.getMpcProjectByIdWithHttpInfo(project_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get vault information
     * This operation retrieves detailed information about a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
  }, {
    key: "getMpcVaultByIdWithHttpInfo",
    value: function getMpcVaultByIdWithHttpInfo(vault_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getMpcVaultById");
      }
      var pathParams = {
        'vault_id': vault_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _MPCVault["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get vault information
     * This operation retrieves detailed information about a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
  }, {
    key: "getMpcVaultById",
    value: function getMpcVaultById(vault_id) {
      return this.getMpcVaultByIdWithHttpInfo(vault_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
  }, {
    key: "getTssRequestByIdWithHttpInfo",
    value: function getTssRequestByIdWithHttpInfo(vault_id, tss_request_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getTssRequestById");
      }
      // verify the required parameter 'tss_request_id' is set
      if (tss_request_id === undefined || tss_request_id === null) {
        throw new Error("Missing the required parameter 'tss_request_id' when calling getTssRequestById");
      }
      var pathParams = {
        'vault_id': vault_id,
        'tss_request_id': tss_request_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TSSRequest["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
  }, {
    key: "getTssRequestById",
    value: function getTssRequestById(vault_id, tss_request_id) {
      return this.getTssRequestByIdWithHttpInfo(vault_id, tss_request_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Info>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Info> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KeyShareHolder>} and HTTP response
     */
  }, {
    key: "listCoboKeyHoldersWithHttpInfo",
    value: function listCoboKeyHoldersWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_KeyShareHolder["default"]];
      return this.apiClient.callApi('/wallets/mpc/cobo_key_share_holders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Info>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Info> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KeyShareHolder>}
     */
  }, {
    key: "listCoboKeyHolders",
    value: function listCoboKeyHolders() {
      return this.listCoboKeyHoldersWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyShareHolderGroupType} [key_share_holder_group_type] The key share holder group type. Possible values include: - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved. 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListKeyShareHolderGroups200Response} and HTTP response
     */
  }, {
    key: "listKeyShareHolderGroupsWithHttpInfo",
    value: function listKeyShareHolderGroupsWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling listKeyShareHolderGroups");
      }
      var pathParams = {
        'vault_id': vault_id
      };
      var queryParams = {
        'key_share_holder_group_type': opts['key_share_holder_group_type'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListKeyShareHolderGroups200Response["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/key_share_holder_groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyShareHolderGroupType} opts.key_share_holder_group_type The key share holder group type. Possible values include: - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved. 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListKeyShareHolderGroups200Response}
     */
  }, {
    key: "listKeyShareHolderGroups",
    value: function listKeyShareHolderGroups(vault_id, opts) {
      return this.listKeyShareHolderGroupsWithHttpInfo(vault_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all key share holders
     * This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {String} [key_share_holder_group_ids] A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListKeyShareHolders200Response} and HTTP response
     */
  }, {
    key: "listKeyShareHoldersWithHttpInfo",
    value: function listKeyShareHoldersWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling listKeyShareHolders");
      }
      var pathParams = {
        'vault_id': vault_id
      };
      var queryParams = {
        'key_share_holder_group_ids': opts['key_share_holder_group_ids'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListKeyShareHolders200Response["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/key_share_holders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all key share holders
     * This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {String} opts.key_share_holder_group_ids A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListKeyShareHolders200Response}
     */
  }, {
    key: "listKeyShareHolders",
    value: function listKeyShareHolders(vault_id, opts) {
      return this.listKeyShareHoldersWithHttpInfo(vault_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all projects
     * This operation retrieves a list of all projects.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMpcProjects200Response} and HTTP response
     */
  }, {
    key: "listMpcProjectsWithHttpInfo",
    value: function listMpcProjectsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListMpcProjects200Response["default"];
      return this.apiClient.callApi('/wallets/mpc/projects', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all projects
     * This operation retrieves a list of all projects.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMpcProjects200Response}
     */
  }, {
    key: "listMpcProjects",
    value: function listMpcProjects(opts) {
      return this.listMpcProjectsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all vaults
     * This operation retrieves a list of all vaults. You can filter the result by project ID.  **Notes for query parameters**: 1. `project_id` is required when `vault_type` is set to `User-Controlled`. 2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {module:model/MPCVaultType} vault_type The vault type. Possible values include: - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets). 
     * @param {Object} opts Optional parameters
     * @param {String} [project_id] The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMpcVaults200Response} and HTTP response
     */
  }, {
    key: "listMpcVaultsWithHttpInfo",
    value: function listMpcVaultsWithHttpInfo(vault_type, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_type' is set
      if (vault_type === undefined || vault_type === null) {
        throw new Error("Missing the required parameter 'vault_type' when calling listMpcVaults");
      }
      var pathParams = {};
      var queryParams = {
        'vault_type': vault_type,
        'project_id': opts['project_id'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListMpcVaults200Response["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all vaults
     * This operation retrieves a list of all vaults. You can filter the result by project ID.  **Notes for query parameters**: 1. `project_id` is required when `vault_type` is set to `User-Controlled`. 2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {module:model/MPCVaultType} vault_type The vault type. Possible values include: - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets). 
     * @param {Object} opts Optional parameters
     * @param {String} opts.project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMpcVaults200Response}
     */
  }, {
    key: "listMpcVaults",
    value: function listMpcVaults(vault_type, opts) {
      return this.listMpcVaultsWithHttpInfo(vault_type, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTssRequests200Response} and HTTP response
     */
  }, {
    key: "listTssRequestsWithHttpInfo",
    value: function listTssRequestsWithHttpInfo(vault_id, key_share_holder_group_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling listTssRequests");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling listTssRequests");
      }
      var pathParams = {
        'vault_id': vault_id
      };
      var queryParams = {
        'key_share_holder_group_id': key_share_holder_group_id,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListTssRequests200Response["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/tss_requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTssRequests200Response}
     */
  }, {
    key: "listTssRequests",
    value: function listTssRequests(vault_id, key_share_holder_group_id, opts) {
      return this.listTssRequestsWithHttpInfo(vault_id, key_share_holder_group_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyShareHolderGroupByIdRequest} [UpdateKeyShareHolderGroupByIdRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
  }, {
    key: "updateKeyShareHolderGroupByIdWithHttpInfo",
    value: function updateKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id, opts) {
      opts = opts || {};
      var postBody = opts['UpdateKeyShareHolderGroupByIdRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling updateKeyShareHolderGroupById");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling updateKeyShareHolderGroupById");
      }
      var pathParams = {
        'vault_id': vault_id,
        'key_share_holder_group_id': key_share_holder_group_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _KeyShareHolderGroup["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyShareHolderGroupByIdRequest} opts.UpdateKeyShareHolderGroupByIdRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
  }, {
    key: "updateKeyShareHolderGroupById",
    value: function updateKeyShareHolderGroupById(vault_id, key_share_holder_group_id, opts) {
      return this.updateKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update project name
     * This operation updates a project's name.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectByIdRequest} [UpdateMpcProjectByIdRequest] The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
  }, {
    key: "updateMpcProjectByIdWithHttpInfo",
    value: function updateMpcProjectByIdWithHttpInfo(project_id, opts) {
      opts = opts || {};
      var postBody = opts['UpdateMpcProjectByIdRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'project_id' is set
      if (project_id === undefined || project_id === null) {
        throw new Error("Missing the required parameter 'project_id' when calling updateMpcProjectById");
      }
      var pathParams = {
        'project_id': project_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MPCProject["default"];
      return this.apiClient.callApi('/wallets/mpc/projects/{project_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update project name
     * This operation updates a project's name.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectByIdRequest} opts.UpdateMpcProjectByIdRequest The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
  }, {
    key: "updateMpcProjectById",
    value: function updateMpcProjectById(project_id, opts) {
      return this.updateMpcProjectByIdWithHttpInfo(project_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update vault name
     * This operation updates a vault's name.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcVaultByIdRequest} [UpdateMpcVaultByIdRequest] The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
  }, {
    key: "updateMpcVaultByIdWithHttpInfo",
    value: function updateMpcVaultByIdWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      var postBody = opts['UpdateMpcVaultByIdRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling updateMpcVaultById");
      }
      var pathParams = {
        'vault_id': vault_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MPCVault["default"];
      return this.apiClient.callApi('/wallets/mpc/vaults/{vault_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update vault name
     * This operation updates a vault's name.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcVaultByIdRequest} opts.UpdateMpcVaultByIdRequest The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
  }, {
    key: "updateMpcVaultById",
    value: function updateMpcVaultById(vault_id, opts) {
      return this.updateMpcVaultByIdWithHttpInfo(vault_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();