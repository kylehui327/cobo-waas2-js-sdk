"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _GetTransactionLimitation200Response = _interopRequireDefault(require("../model/GetTransactionLimitation200Response"));
var _ListSupportedCountries200ResponseInner = _interopRequireDefault(require("../model/ListSupportedCountries200ResponseInner"));
var _SubmitDepositTravelRuleInfo201Response = _interopRequireDefault(require("../model/SubmitDepositTravelRuleInfo201Response"));
var _TravelRuleDepositRequest = _interopRequireDefault(require("../model/TravelRuleDepositRequest"));
var _TravelRuleWithdrawRequest = _interopRequireDefault(require("../model/TravelRuleWithdrawRequest"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* TravelRule service.
* @module api/TravelRuleApi
*/
var TravelRuleApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new TravelRuleApi. 
  * @alias module:api/TravelRuleApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function TravelRuleApi(apiClient) {
    _classCallCheck(this, TravelRuleApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Retrieve transaction limitations
   * This operation retrieves Travel Rule requirements and available options for a transaction based on its transaction type and ID.  Use this endpoint before submitting Travel Rule information to understand the requirements and available options for your transaction. 
   * @param {module:model/String} transaction_type The transaction type. Possible values include:    - `DEPOSIT`: A deposit transaction.   - `WITHDRAW`: A withdrawal transaction. 
   * @param {String} transaction_id The transaction ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransactionLimitation200Response} and HTTP response
   */
  return _createClass(TravelRuleApi, [{
    key: "getTransactionLimitationWithHttpInfo",
    value: function getTransactionLimitationWithHttpInfo(transaction_type, transaction_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'transaction_type' is set
      if (transaction_type === undefined || transaction_type === null) {
        throw new Error("Missing the required parameter 'transaction_type' when calling getTransactionLimitation");
      }
      // verify the required parameter 'transaction_id' is set
      if (transaction_id === undefined || transaction_id === null) {
        throw new Error("Missing the required parameter 'transaction_id' when calling getTransactionLimitation");
      }
      var pathParams = {};
      var queryParams = {
        'transaction_type': transaction_type,
        'transaction_id': transaction_id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetTransactionLimitation200Response["default"];
      return this.apiClient.callApi('/travel_rule/transaction/limitation', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Retrieve transaction limitations
     * This operation retrieves Travel Rule requirements and available options for a transaction based on its transaction type and ID.  Use this endpoint before submitting Travel Rule information to understand the requirements and available options for your transaction. 
     * @param {module:model/String} transaction_type The transaction type. Possible values include:    - `DEPOSIT`: A deposit transaction.   - `WITHDRAW`: A withdrawal transaction. 
     * @param {String} transaction_id The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransactionLimitation200Response}
     */
  }, {
    key: "getTransactionLimitation",
    value: function getTransactionLimitation(transaction_type, transaction_id) {
      return this.getTransactionLimitationWithHttpInfo(transaction_type, transaction_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List supported countries
     * This operation retrieves a list of supported countries that can be used when submitting Travel Rule information.  Use this endpoint to obtain valid country values for:   - Place of incorporation of a legal entity   - Place of birth of a natural person 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ListSupportedCountries200ResponseInner>} and HTTP response
     */
  }, {
    key: "listSupportedCountriesWithHttpInfo",
    value: function listSupportedCountriesWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ListSupportedCountries200ResponseInner["default"]];
      return this.apiClient.callApi('/travel_rule/transaction/countries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List supported countries
     * This operation retrieves a list of supported countries that can be used when submitting Travel Rule information.  Use this endpoint to obtain valid country values for:   - Place of incorporation of a legal entity   - Place of birth of a natural person 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ListSupportedCountries200ResponseInner>}
     */
  }, {
    key: "listSupportedCountries",
    value: function listSupportedCountries() {
      return this.listSupportedCountriesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Submit Travel Rule information for deposits
     * This operation submits Travel Rule information for a deposit transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleDepositRequest} [TravelRuleDepositRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubmitDepositTravelRuleInfo201Response} and HTTP response
     */
  }, {
    key: "submitDepositTravelRuleInfoWithHttpInfo",
    value: function submitDepositTravelRuleInfoWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['TravelRuleDepositRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SubmitDepositTravelRuleInfo201Response["default"];
      return this.apiClient.callApi('/travel_rule/transaction/deposit/travel_rule_info', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Submit Travel Rule information for deposits
     * This operation submits Travel Rule information for a deposit transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleDepositRequest} opts.TravelRuleDepositRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubmitDepositTravelRuleInfo201Response}
     */
  }, {
    key: "submitDepositTravelRuleInfo",
    value: function submitDepositTravelRuleInfo(opts) {
      return this.submitDepositTravelRuleInfoWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Submit Travel Rule information for withdrawals
     * This operation submits Travel Rule information for a withdrawal transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleWithdrawRequest} [TravelRuleWithdrawRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubmitDepositTravelRuleInfo201Response} and HTTP response
     */
  }, {
    key: "submitWithdrawTravelRuleInfoWithHttpInfo",
    value: function submitWithdrawTravelRuleInfoWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['TravelRuleWithdrawRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SubmitDepositTravelRuleInfo201Response["default"];
      return this.apiClient.callApi('/travel_rule/transaction/withdraw/travel_rule_info', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Submit Travel Rule information for withdrawals
     * This operation submits Travel Rule information for a withdrawal transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleWithdrawRequest} opts.TravelRuleWithdrawRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubmitDepositTravelRuleInfo201Response}
     */
  }, {
    key: "submitWithdrawTravelRuleInfo",
    value: function submitWithdrawTravelRuleInfo(opts) {
      return this.submitWithdrawTravelRuleInfoWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();