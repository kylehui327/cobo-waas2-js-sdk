"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AppWorkflow = _interopRequireDefault(require("../model/AppWorkflow"));
var _ApprovalRequestDetail = _interopRequireDefault(require("../model/ApprovalRequestDetail"));
var _CreateApprovalRequest201Response = _interopRequireDefault(require("../model/CreateApprovalRequest201Response"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _ListApprovalRequests200Response = _interopRequireDefault(require("../model/ListApprovalRequests200Response"));
var _RequestApproval = _interopRequireDefault(require("../model/RequestApproval"));
var _RevokeApprovalRequest201Response = _interopRequireDefault(require("../model/RevokeApprovalRequest201Response"));
var _RevokeApprovalRequestRequest = _interopRequireDefault(require("../model/RevokeApprovalRequestRequest"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* AppWorkflows service.
* @module api/AppWorkflowsApi
*/
var AppWorkflowsApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new AppWorkflowsApi. 
  * @alias module:api/AppWorkflowsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AppWorkflowsApi(apiClient) {
    _classCallCheck(this, AppWorkflowsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Request workflow approval
   * This operation triggers a specified workflow and generates a new approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
   * @param {Object} opts Optional parameters
   * @param {module:model/RequestApproval} [RequestApproval] The request body to request workflow approval.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateApprovalRequest201Response} and HTTP response
   */
  return _createClass(AppWorkflowsApi, [{
    key: "createApprovalRequestWithHttpInfo",
    value: function createApprovalRequestWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['RequestApproval'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateApprovalRequest201Response["default"];
      return this.apiClient.callApi('/app/workflows/approval_requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Request workflow approval
     * This operation triggers a specified workflow and generates a new approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestApproval} opts.RequestApproval The request body to request workflow approval.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateApprovalRequest201Response}
     */
  }, {
    key: "createApprovalRequest",
    value: function createApprovalRequest(opts) {
      return this.createApprovalRequestWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get approval request details
     * This operation retrieves the details of a specific approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApprovalRequestDetail} and HTTP response
     */
  }, {
    key: "getApprovalRequestByIdWithHttpInfo",
    value: function getApprovalRequestByIdWithHttpInfo(approval_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'approval_id' is set
      if (approval_id === undefined || approval_id === null) {
        throw new Error("Missing the required parameter 'approval_id' when calling getApprovalRequestById");
      }
      var pathParams = {
        'approval_id': approval_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ApprovalRequestDetail["default"];
      return this.apiClient.callApi('/app/workflows/approval_requests/{approval_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get approval request details
     * This operation retrieves the details of a specific approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApprovalRequestDetail}
     */
  }, {
    key: "getApprovalRequestById",
    value: function getApprovalRequestById(approval_id) {
      return this.getApprovalRequestByIdWithHttpInfo(approval_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List app workflows
     * This operation retrieves all approval workflows of an Cobo Portal App. <Note>You need to [configure approval workflow](https://www.cobo.com/developers/v2/apps/configure-workflow) in the app Manifest file first.</Note> <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AppWorkflow>} and HTTP response
     */
  }, {
    key: "listAppWorkflowsWithHttpInfo",
    value: function listAppWorkflowsWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_AppWorkflow["default"]];
      return this.apiClient.callApi('/app/workflows', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List app workflows
     * This operation retrieves all approval workflows of an Cobo Portal App. <Note>You need to [configure approval workflow](https://www.cobo.com/developers/v2/apps/configure-workflow) in the app Manifest file first.</Note> <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AppWorkflow>}
     */
  }, {
    key: "listAppWorkflows",
    value: function listAppWorkflows() {
      return this.listAppWorkflowsWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List approval requests
     * This operation retrieves a list of approval requests.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} operation_id The unique ID of the approval workflow.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListApprovalRequests200Response} and HTTP response
     */
  }, {
    key: "listApprovalRequestsWithHttpInfo",
    value: function listApprovalRequestsWithHttpInfo(operation_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'operation_id' is set
      if (operation_id === undefined || operation_id === null) {
        throw new Error("Missing the required parameter 'operation_id' when calling listApprovalRequests");
      }
      var pathParams = {};
      var queryParams = {
        'operation_id': operation_id,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListApprovalRequests200Response["default"];
      return this.apiClient.callApi('/app/workflows/approval_requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List approval requests
     * This operation retrieves a list of approval requests.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} operation_id The unique ID of the approval workflow.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListApprovalRequests200Response}
     */
  }, {
    key: "listApprovalRequests",
    value: function listApprovalRequests(operation_id, opts) {
      return this.listApprovalRequestsWithHttpInfo(operation_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Revoke approval request
     * This operation revokes a pending approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeApprovalRequestRequest} [RevokeApprovalRequestRequest] The request body to revoke an approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RevokeApprovalRequest201Response} and HTTP response
     */
  }, {
    key: "revokeApprovalRequestWithHttpInfo",
    value: function revokeApprovalRequestWithHttpInfo(approval_id, opts) {
      opts = opts || {};
      var postBody = opts['RevokeApprovalRequestRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'approval_id' is set
      if (approval_id === undefined || approval_id === null) {
        throw new Error("Missing the required parameter 'approval_id' when calling revokeApprovalRequest");
      }
      var pathParams = {
        'approval_id': approval_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _RevokeApprovalRequest201Response["default"];
      return this.apiClient.callApi('/app/workflows/approval_requests/{approval_id}/revoke', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Revoke approval request
     * This operation revokes a pending approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeApprovalRequestRequest} opts.RevokeApprovalRequestRequest The request body to revoke an approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RevokeApprovalRequest201Response}
     */
  }, {
    key: "revokeApprovalRequest",
    value: function revokeApprovalRequest(approval_id, opts) {
      return this.revokeApprovalRequestWithHttpInfo(approval_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();