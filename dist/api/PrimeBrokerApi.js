"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ChangeGuardPubkey200Response = _interopRequireDefault(require("../model/ChangeGuardPubkey200Response"));
var _CreatePrimeBrokerAddress201Response = _interopRequireDefault(require("../model/CreatePrimeBrokerAddress201Response"));
var _CreatePrimeBrokerAddressRequest = _interopRequireDefault(require("../model/CreatePrimeBrokerAddressRequest"));
var _DeleteGuardPubkey201Response = _interopRequireDefault(require("../model/DeleteGuardPubkey201Response"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _QueryApprovalStatement200Response = _interopRequireDefault(require("../model/QueryApprovalStatement200Response"));
var _QueryGuardPubkey200Response = _interopRequireDefault(require("../model/QueryGuardPubkey200Response"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* PrimeBroker service.
* @module api/PrimeBrokerApi
*/
var PrimeBrokerApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new PrimeBrokerApi. 
  * @alias module:api/PrimeBrokerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PrimeBrokerApi(apiClient) {
    _classCallCheck(this, PrimeBrokerApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Change Guard pubkey binding
   * This operation updates an existing binding to associate a broker user ID with a new Cobo Guard public key. 
   * @param {String} user_id The user ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeGuardPubkey200Response} and HTTP response
   */
  return _createClass(PrimeBrokerApi, [{
    key: "changeGuardPubkeyWithHttpInfo",
    value: function changeGuardPubkeyWithHttpInfo(user_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'user_id' is set
      if (user_id === undefined || user_id === null) {
        throw new Error("Missing the required parameter 'user_id' when calling changeGuardPubkey");
      }
      var pathParams = {
        'user_id': user_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ChangeGuardPubkey200Response["default"];
      return this.apiClient.callApi('/prime_broker/user/{user_id}/guard_pubkey', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Change Guard pubkey binding
     * This operation updates an existing binding to associate a broker user ID with a new Cobo Guard public key. 
     * @param {String} user_id The user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeGuardPubkey200Response}
     */
  }, {
    key: "changeGuardPubkey",
    value: function changeGuardPubkey(user_id) {
      return this.changeGuardPubkeyWithHttpInfo(user_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create Guard pubkey binding
     * This operation creates a binding between a broker user ID and a Cobo Guard public key.  
     * @param {String} user_id The user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChangeGuardPubkey200Response} and HTTP response
     */
  }, {
    key: "createGuardPubkeyWithHttpInfo",
    value: function createGuardPubkeyWithHttpInfo(user_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'user_id' is set
      if (user_id === undefined || user_id === null) {
        throw new Error("Missing the required parameter 'user_id' when calling createGuardPubkey");
      }
      var pathParams = {
        'user_id': user_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ChangeGuardPubkey200Response["default"];
      return this.apiClient.callApi('/prime_broker/user/{user_id}/guard_pubkey', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create Guard pubkey binding
     * This operation creates a binding between a broker user ID and a Cobo Guard public key.  
     * @param {String} user_id The user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChangeGuardPubkey200Response}
     */
  }, {
    key: "createGuardPubkey",
    value: function createGuardPubkey(user_id) {
      return this.createGuardPubkeyWithHttpInfo(user_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Bind addresses to a broker user
     * This operation binds addresses to a broker user. 
     * @param {String} user_id The user ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePrimeBrokerAddressRequest} [CreatePrimeBrokerAddressRequest] The request body to bind addresses to a broker user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePrimeBrokerAddress201Response} and HTTP response
     */
  }, {
    key: "createPrimeBrokerAddressWithHttpInfo",
    value: function createPrimeBrokerAddressWithHttpInfo(user_id, opts) {
      opts = opts || {};
      var postBody = opts['CreatePrimeBrokerAddressRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'user_id' is set
      if (user_id === undefined || user_id === null) {
        throw new Error("Missing the required parameter 'user_id' when calling createPrimeBrokerAddress");
      }
      var pathParams = {
        'user_id': user_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatePrimeBrokerAddress201Response["default"];
      return this.apiClient.callApi('/prime_broker/user/{user_id}/addresses', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Bind addresses to a broker user
     * This operation binds addresses to a broker user. 
     * @param {String} user_id The user ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePrimeBrokerAddressRequest} opts.CreatePrimeBrokerAddressRequest The request body to bind addresses to a broker user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePrimeBrokerAddress201Response}
     */
  }, {
    key: "createPrimeBrokerAddress",
    value: function createPrimeBrokerAddress(user_id, opts) {
      return this.createPrimeBrokerAddressWithHttpInfo(user_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Guard pubkey binding
     * This operation deletes a binding between a broker user ID and a Cobo Guard public key. 
     * @param {String} user_id The user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteGuardPubkey201Response} and HTTP response
     */
  }, {
    key: "deleteGuardPubkeyWithHttpInfo",
    value: function deleteGuardPubkeyWithHttpInfo(user_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'user_id' is set
      if (user_id === undefined || user_id === null) {
        throw new Error("Missing the required parameter 'user_id' when calling deleteGuardPubkey");
      }
      var pathParams = {
        'user_id': user_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DeleteGuardPubkey201Response["default"];
      return this.apiClient.callApi('/prime_broker/user/{user_id}/guard_pubkey/delete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Guard pubkey binding
     * This operation deletes a binding between a broker user ID and a Cobo Guard public key. 
     * @param {String} user_id The user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteGuardPubkey201Response}
     */
  }, {
    key: "deleteGuardPubkey",
    value: function deleteGuardPubkey(user_id) {
      return this.deleteGuardPubkeyWithHttpInfo(user_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Query approval statement
     * This operation queries an approval statement. 
     * @param {String} statement_id The approval statement ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QueryApprovalStatement200Response} and HTTP response
     */
  }, {
    key: "queryApprovalStatementWithHttpInfo",
    value: function queryApprovalStatementWithHttpInfo(statement_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'statement_id' is set
      if (statement_id === undefined || statement_id === null) {
        throw new Error("Missing the required parameter 'statement_id' when calling queryApprovalStatement");
      }
      var pathParams = {
        'statement_id': statement_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _QueryApprovalStatement200Response["default"];
      return this.apiClient.callApi('/prime_broker/approval_statement/{statement_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Query approval statement
     * This operation queries an approval statement. 
     * @param {String} statement_id The approval statement ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QueryApprovalStatement200Response}
     */
  }, {
    key: "queryApprovalStatement",
    value: function queryApprovalStatement(statement_id) {
      return this.queryApprovalStatementWithHttpInfo(statement_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Query a Guard pubkey
     * This operation retrieves the current Cobo Guard public key binding details for a broker user. 
     * @param {String} user_id The user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QueryGuardPubkey200Response} and HTTP response
     */
  }, {
    key: "queryGuardPubkeyWithHttpInfo",
    value: function queryGuardPubkeyWithHttpInfo(user_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'user_id' is set
      if (user_id === undefined || user_id === null) {
        throw new Error("Missing the required parameter 'user_id' when calling queryGuardPubkey");
      }
      var pathParams = {
        'user_id': user_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _QueryGuardPubkey200Response["default"];
      return this.apiClient.callApi('/prime_broker/user/{user_id}/guard_pubkey', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Query a Guard pubkey
     * This operation retrieves the current Cobo Guard public key binding details for a broker user. 
     * @param {String} user_id The user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QueryGuardPubkey200Response}
     */
  }, {
    key: "queryGuardPubkey",
    value: function queryGuardPubkey(user_id) {
      return this.queryGuardPubkeyWithHttpInfo(user_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();