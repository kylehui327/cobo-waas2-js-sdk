"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _EstimatedFixedFee = _interopRequireDefault(require("../model/EstimatedFixedFee"));
var _FeeStationTransfer = _interopRequireDefault(require("../model/FeeStationTransfer"));
var _ListAddresses200Response = _interopRequireDefault(require("../model/ListAddresses200Response"));
var _ListTokenBalancesForFeeStation200Response = _interopRequireDefault(require("../model/ListTokenBalancesForFeeStation200Response"));
var _ListTransactions200Response = _interopRequireDefault(require("../model/ListTransactions200Response"));
var _TransactionDetail = _interopRequireDefault(require("../model/TransactionDetail"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* FeeStation service.
* @module api/FeeStationApi
*/
var FeeStationApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new FeeStationApi. 
  * @alias module:api/FeeStationApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function FeeStationApi(apiClient) {
    _classCallCheck(this, FeeStationApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Estimate fee for Fee Station transaction
   * This operation estimates the gas fee required for a top-up transaction sent by [Fee Station](https://manuals.cobo.com/en/portal/fee-station/introduction) to provide gas to the sender of the original transaction.  You need to provide the token ID and transfer amount.  For more information about transaction fee models and how fees are calculated, refer to [Estimate transaction fee](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees). 
   * @param {Object} opts Optional parameters
   * @param {module:model/FeeStationTransfer} [FeeStationTransfer] The information about a Fee Station top-up transaction.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EstimatedFixedFee} and HTTP response
   */
  return _createClass(FeeStationApi, [{
    key: "estimateFeeStationFeeWithHttpInfo",
    value: function estimateFeeStationFeeWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['FeeStationTransfer'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _EstimatedFixedFee["default"];
      return this.apiClient.callApi('/fee_station/transactions/estimate_fee', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Estimate fee for Fee Station transaction
     * This operation estimates the gas fee required for a top-up transaction sent by [Fee Station](https://manuals.cobo.com/en/portal/fee-station/introduction) to provide gas to the sender of the original transaction.  You need to provide the token ID and transfer amount.  For more information about transaction fee models and how fees are calculated, refer to [Estimate transaction fee](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees). 
     * @param {Object} opts Optional parameters
     * @param {module:model/FeeStationTransfer} opts.FeeStationTransfer The information about a Fee Station top-up transaction.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EstimatedFixedFee}
     */
  }, {
    key: "estimateFeeStationFee",
    value: function estimateFeeStationFee(opts) {
      return this.estimateFeeStationFeeWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Fee Station transaction information
     * This operation retrieves detailed information about a specified Fee Station transaction record, such as the transaction status, source address, destination address, and timestamp. 
     * @param {String} transaction_id The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionDetail} and HTTP response
     */
  }, {
    key: "getFeeStationTransactionByIdWithHttpInfo",
    value: function getFeeStationTransactionByIdWithHttpInfo(transaction_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'transaction_id' is set
      if (transaction_id === undefined || transaction_id === null) {
        throw new Error("Missing the required parameter 'transaction_id' when calling getFeeStationTransactionById");
      }
      var pathParams = {
        'transaction_id': transaction_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TransactionDetail["default"];
      return this.apiClient.callApi('/fee_station/transactions/{transaction_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Fee Station transaction information
     * This operation retrieves detailed information about a specified Fee Station transaction record, such as the transaction status, source address, destination address, and timestamp. 
     * @param {String} transaction_id The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionDetail}
     */
  }, {
    key: "getFeeStationTransactionById",
    value: function getFeeStationTransactionById(transaction_id) {
      return this.getFeeStationTransactionByIdWithHttpInfo(transaction_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Fee Station addresses
     * This operation retrieves a list of deposit addresses of your Fee Station, including the chain ID, address, and additional information. You can filter the result by chain ID and address. 
     * @param {Object} opts Optional parameters
     * @param {String} [chain_ids] A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {String} [addresses] A list of wallet addresses, separated by comma. For addresses requiring a memo, append the memo after the address using the '|' separator (e.g., \"address|memo\").
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAddresses200Response} and HTTP response
     */
  }, {
    key: "listFeeStationAddressesWithHttpInfo",
    value: function listFeeStationAddressesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'chain_ids': opts['chain_ids'],
        'addresses': opts['addresses'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListAddresses200Response["default"];
      return this.apiClient.callApi('/fee_station/addresses', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Fee Station addresses
     * This operation retrieves a list of deposit addresses of your Fee Station, including the chain ID, address, and additional information. You can filter the result by chain ID and address. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.chain_ids A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {String} opts.addresses A list of wallet addresses, separated by comma. For addresses requiring a memo, append the memo after the address using the '|' separator (e.g., \"address|memo\").
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAddresses200Response}
     */
  }, {
    key: "listFeeStationAddresses",
    value: function listFeeStationAddresses(opts) {
      return this.listFeeStationAddressesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all Fee Station transactions
     * This operation retrieves all Fee Station transactions under your organization.  You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamp. You can also paginate and sort your query results. 
     * @param {Object} opts Optional parameters
     * @param {String} [request_id] The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
     * @param {String} [cobo_ids] A list of Cobo IDs, separated by comma. A Cobo ID can be used to track a transaction.
     * @param {String} [transaction_ids] A list of transaction IDs, separated by comma.
     * @param {String} [transaction_hashes] A list of transaction hashes, separated by comma.
     * @param {String} [types] A list of transaction types for Fee Station, separated by comma. Possible values include:    - `Deposit`: A deposit transaction.   - `Withdrawal`: A withdrawal transaction. 
     * @param {String} [statuses] A list of transaction statuses, separated by comma. Possible values include:    - `Submitted`: The transaction is submitted.   - `PendingScreening`: The transaction is pending screening by Risk Control.    - `PendingAuthorization`: The transaction is pending approvals.   - `PendingSignature`: The transaction is pending signature.    - `Broadcasting`: The transaction is being broadcast.   - `Confirming`: The transaction is waiting for the required number of confirmations.   - `Completed`: The transaction is completed.   - `Failed`: The transaction failed.   - `Rejected`: The transaction is rejected.   - `Pending`: The transaction is waiting to be included in the next block of the blockchain. 
     * @param {String} [chain_ids] A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {String} [token_ids] A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {String} [asset_ids] (This concept applies to Exchange Wallets only) A list of asset IDs, separated by comma. An asset ID is the unique identifier of the asset held within your linked exchange account.
     * @param {Number} [min_created_timestamp] The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.  If not provided, the default value is 90 days before the current time. This default value is subject to change. 
     * @param {Number} [max_created_timestamp] The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.  If not provided, the default value is the current time. This default value is subject to change. 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {module:model/String} [direction = 'ASC')] The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTransactions200Response} and HTTP response
     */
  }, {
    key: "listFeeStationTransactionsWithHttpInfo",
    value: function listFeeStationTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'request_id': opts['request_id'],
        'cobo_ids': opts['cobo_ids'],
        'transaction_ids': opts['transaction_ids'],
        'transaction_hashes': opts['transaction_hashes'],
        'types': opts['types'],
        'statuses': opts['statuses'],
        'chain_ids': opts['chain_ids'],
        'token_ids': opts['token_ids'],
        'asset_ids': opts['asset_ids'],
        'min_created_timestamp': opts['min_created_timestamp'],
        'max_created_timestamp': opts['max_created_timestamp'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'direction': opts['direction']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListTransactions200Response["default"];
      return this.apiClient.callApi('/fee_station/transactions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all Fee Station transactions
     * This operation retrieves all Fee Station transactions under your organization.  You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamp. You can also paginate and sort your query results. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.request_id The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
     * @param {String} opts.cobo_ids A list of Cobo IDs, separated by comma. A Cobo ID can be used to track a transaction.
     * @param {String} opts.transaction_ids A list of transaction IDs, separated by comma.
     * @param {String} opts.transaction_hashes A list of transaction hashes, separated by comma.
     * @param {String} opts.types A list of transaction types for Fee Station, separated by comma. Possible values include:    - `Deposit`: A deposit transaction.   - `Withdrawal`: A withdrawal transaction. 
     * @param {String} opts.statuses A list of transaction statuses, separated by comma. Possible values include:    - `Submitted`: The transaction is submitted.   - `PendingScreening`: The transaction is pending screening by Risk Control.    - `PendingAuthorization`: The transaction is pending approvals.   - `PendingSignature`: The transaction is pending signature.    - `Broadcasting`: The transaction is being broadcast.   - `Confirming`: The transaction is waiting for the required number of confirmations.   - `Completed`: The transaction is completed.   - `Failed`: The transaction failed.   - `Rejected`: The transaction is rejected.   - `Pending`: The transaction is waiting to be included in the next block of the blockchain. 
     * @param {String} opts.chain_ids A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {String} opts.token_ids A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {String} opts.asset_ids (This concept applies to Exchange Wallets only) A list of asset IDs, separated by comma. An asset ID is the unique identifier of the asset held within your linked exchange account.
     * @param {Number} opts.min_created_timestamp The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.  If not provided, the default value is 90 days before the current time. This default value is subject to change. 
     * @param {Number} opts.max_created_timestamp The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.  If not provided, the default value is the current time. This default value is subject to change. 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {module:model/String} opts.direction The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order.  (default to 'ASC')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTransactions200Response}
     */
  }, {
    key: "listFeeStationTransactions",
    value: function listFeeStationTransactions(opts) {
      return this.listFeeStationTransactionsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Fee Station token balances
     * The operation retrieves a list of token balances within your Fee Station. 
     * @param {Object} opts Optional parameters
     * @param {String} [token_ids] A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTokenBalancesForFeeStation200Response} and HTTP response
     */
  }, {
    key: "listTokenBalancesForFeeStationWithHttpInfo",
    value: function listTokenBalancesForFeeStationWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'token_ids': opts['token_ids'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListTokenBalancesForFeeStation200Response["default"];
      return this.apiClient.callApi('/fee_station/tokens', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Fee Station token balances
     * The operation retrieves a list of token balances within your Fee Station. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.token_ids A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTokenBalancesForFeeStation200Response}
     */
  }, {
    key: "listTokenBalancesForFeeStation",
    value: function listTokenBalancesForFeeStation(opts) {
      return this.listTokenBalancesForFeeStationWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();