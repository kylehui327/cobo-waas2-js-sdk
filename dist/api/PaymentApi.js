"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AcquiringType = _interopRequireDefault(require("../model/AcquiringType"));
var _BankAccount = _interopRequireDefault(require("../model/BankAccount"));
var _CreateMerchantRequest = _interopRequireDefault(require("../model/CreateMerchantRequest"));
var _CreatePaymentOrderRequest = _interopRequireDefault(require("../model/CreatePaymentOrderRequest"));
var _CreateRefundRequest = _interopRequireDefault(require("../model/CreateRefundRequest"));
var _CreateSettlementRequestRequest = _interopRequireDefault(require("../model/CreateSettlementRequestRequest"));
var _CryptoAddress = _interopRequireDefault(require("../model/CryptoAddress"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _ForcedSweep = _interopRequireDefault(require("../model/ForcedSweep"));
var _ForcedSweepRequest = _interopRequireDefault(require("../model/ForcedSweepRequest"));
var _GetExchangeRate200Response = _interopRequireDefault(require("../model/GetExchangeRate200Response"));
var _GetRefunds200Response = _interopRequireDefault(require("../model/GetRefunds200Response"));
var _GetSettlementInfoByIds200Response = _interopRequireDefault(require("../model/GetSettlementInfoByIds200Response"));
var _ListForcedSweepRequests200Response = _interopRequireDefault(require("../model/ListForcedSweepRequests200Response"));
var _ListMerchants200Response = _interopRequireDefault(require("../model/ListMerchants200Response"));
var _ListPaymentOrders200Response = _interopRequireDefault(require("../model/ListPaymentOrders200Response"));
var _ListSettlementRequests200Response = _interopRequireDefault(require("../model/ListSettlementRequests200Response"));
var _ListTopUpPayers200Response = _interopRequireDefault(require("../model/ListTopUpPayers200Response"));
var _Merchant = _interopRequireDefault(require("../model/Merchant"));
var _Order = _interopRequireDefault(require("../model/Order"));
var _Refund = _interopRequireDefault(require("../model/Refund"));
var _Settlement = _interopRequireDefault(require("../model/Settlement"));
var _SupportedToken = _interopRequireDefault(require("../model/SupportedToken"));
var _TopUpAddress = _interopRequireDefault(require("../model/TopUpAddress"));
var _UpdateMerchantByIdRequest = _interopRequireDefault(require("../model/UpdateMerchantByIdRequest"));
var _UpdatePaymentOrderRequest = _interopRequireDefault(require("../model/UpdatePaymentOrderRequest"));
var _UpdateRefundByIdRequest = _interopRequireDefault(require("../model/UpdateRefundByIdRequest"));
var _UpdateTopUpAddress = _interopRequireDefault(require("../model/UpdateTopUpAddress"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Payment service.
* @module api/PaymentApi
*/
var PaymentApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new PaymentApi. 
  * @alias module:api/PaymentApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentApi(apiClient) {
    _classCallCheck(this, PaymentApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Cancel refund order
   * This operation cancels a specified refund order. 
   * @param {String} refund_id The refund order ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
   */
  return _createClass(PaymentApi, [{
    key: "cancelRefundByIdWithHttpInfo",
    value: function cancelRefundByIdWithHttpInfo(refund_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling cancelRefundById");
      }
      var pathParams = {
        'refund_id': refund_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Refund["default"];
      return this.apiClient.callApi('/payments/refunds/{refund_id}/cancel', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Cancel refund order
     * This operation cancels a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
  }, {
    key: "cancelRefundById",
    value: function cancelRefundById(refund_id) {
      return this.cancelRefundByIdWithHttpInfo(refund_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create force sweep request
     * This operation creates a force sweep request to settle or refund available balances.  
     * @param {Object} opts Optional parameters
     * @param {module:model/ForcedSweepRequest} [ForcedSweepRequest] The request body to force sweep.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ForcedSweep} and HTTP response
     */
  }, {
    key: "createForcedSweepRequestWithHttpInfo",
    value: function createForcedSweepRequestWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['ForcedSweepRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ForcedSweep["default"];
      return this.apiClient.callApi('/payments/force_sweep_requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create force sweep request
     * This operation creates a force sweep request to settle or refund available balances.  
     * @param {Object} opts Optional parameters
     * @param {module:model/ForcedSweepRequest} opts.ForcedSweepRequest The request body to force sweep.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ForcedSweep}
     */
  }, {
    key: "createForcedSweepRequest",
    value: function createForcedSweepRequest(opts) {
      return this.createForcedSweepRequestWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create merchant
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant's information. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMerchantRequest} [CreateMerchantRequest] The request body to create a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Merchant} and HTTP response
     */
  }, {
    key: "createMerchantWithHttpInfo",
    value: function createMerchantWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['CreateMerchantRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Merchant["default"];
      return this.apiClient.callApi('/payments/merchants', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create merchant
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant's information. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMerchantRequest} opts.CreateMerchantRequest The request body to create a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Merchant}
     */
  }, {
    key: "createMerchant",
    value: function createMerchant(opts) {
      return this.createMerchantWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create pay-in order
     * This operation creates a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentOrderRequest} [CreatePaymentOrderRequest] The request body to create a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
  }, {
    key: "createPaymentOrderWithHttpInfo",
    value: function createPaymentOrderWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['CreatePaymentOrderRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Order["default"];
      return this.apiClient.callApi('/payments/orders', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create pay-in order
     * This operation creates a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentOrderRequest} opts.CreatePaymentOrderRequest The request body to create a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
  }, {
    key: "createPaymentOrder",
    value: function createPaymentOrder(opts) {
      return this.createPaymentOrderWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create refund order
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRefundRequest} [CreateRefundRequest] The request body to create a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
  }, {
    key: "createRefundWithHttpInfo",
    value: function createRefundWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['CreateRefundRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Refund["default"];
      return this.apiClient.callApi('/payments/refunds', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create refund order
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRefundRequest} opts.CreateRefundRequest The request body to create a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
  }, {
    key: "createRefund",
    value: function createRefund(opts) {
      return this.createRefundWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create settlement request
     * This operation creates a settlement request to withdraw available balances. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSettlementRequestRequest} [CreateSettlementRequestRequest] The request body to create a settlement request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settlement} and HTTP response
     */
  }, {
    key: "createSettlementRequestWithHttpInfo",
    value: function createSettlementRequestWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['CreateSettlementRequestRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Settlement["default"];
      return this.apiClient.callApi('/payments/settlement_requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create settlement request
     * This operation creates a settlement request to withdraw available balances. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSettlementRequestRequest} opts.CreateSettlementRequestRequest The request body to create a settlement request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settlement}
     */
  }, {
    key: "createSettlementRequest",
    value: function createSettlementRequest(opts) {
      return this.createSettlementRequestWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get exchange rate
     * This operation retrieves the current exchange rate between a specified currency pair. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} currency The fiat currency. Currently, only `USD` is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExchangeRate200Response} and HTTP response
     */
  }, {
    key: "getExchangeRateWithHttpInfo",
    value: function getExchangeRateWithHttpInfo(token_id, currency) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getExchangeRate");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getExchangeRate");
      }
      var pathParams = {
        'token_id': token_id,
        'currency': currency
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetExchangeRate200Response["default"];
      return this.apiClient.callApi('/payments/exchange_rates/{token_id}/{currency}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get exchange rate
     * This operation retrieves the current exchange rate between a specified currency pair. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} currency The fiat currency. Currently, only `USD` is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExchangeRate200Response}
     */
  }, {
    key: "getExchangeRate",
    value: function getExchangeRate(token_id, currency) {
      return this.getExchangeRateWithHttpInfo(token_id, currency).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get pay-in order information
     * This operation retrieves details of a specific pay-in order. 
     * @param {String} order_id The pay-in order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
  }, {
    key: "getPaymentOrderDetailByIdWithHttpInfo",
    value: function getPaymentOrderDetailByIdWithHttpInfo(order_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling getPaymentOrderDetailById");
      }
      var pathParams = {
        'order_id': order_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Order["default"];
      return this.apiClient.callApi('/payments/orders/{order_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get pay-in order information
     * This operation retrieves details of a specific pay-in order. 
     * @param {String} order_id The pay-in order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
  }, {
    key: "getPaymentOrderDetailById",
    value: function getPaymentOrderDetailById(order_id) {
      return this.getPaymentOrderDetailByIdWithHttpInfo(order_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get refund order information
     * This operation retrieves the detailed information about a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
  }, {
    key: "getRefundDetailByIdWithHttpInfo",
    value: function getRefundDetailByIdWithHttpInfo(refund_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling getRefundDetailById");
      }
      var pathParams = {
        'refund_id': refund_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Refund["default"];
      return this.apiClient.callApi('/payments/refunds/{refund_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get refund order information
     * This operation retrieves the detailed information about a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
  }, {
    key: "getRefundDetailById",
    value: function getRefundDetailById(refund_id) {
      return this.getRefundDetailByIdWithHttpInfo(refund_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all refund orders
     * This operation retrieves the information of all refund orders. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [request_id] The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRefunds200Response} and HTTP response
     */
  }, {
    key: "getRefundsWithHttpInfo",
    value: function getRefundsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'request_id': opts['request_id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetRefunds200Response["default"];
      return this.apiClient.callApi('/payments/refunds', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all refund orders
     * This operation retrieves the information of all refund orders. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.request_id The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRefunds200Response}
     */
  }, {
    key: "getRefunds",
    value: function getRefunds(opts) {
      return this.getRefundsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get settlement request information
     * This operation retrieves the information of a specific settlement request. 
     * @param {String} settlement_request_id The settlement request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settlement} and HTTP response
     */
  }, {
    key: "getSettlementByIdWithHttpInfo",
    value: function getSettlementByIdWithHttpInfo(settlement_request_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'settlement_request_id' is set
      if (settlement_request_id === undefined || settlement_request_id === null) {
        throw new Error("Missing the required parameter 'settlement_request_id' when calling getSettlementById");
      }
      var pathParams = {
        'settlement_request_id': settlement_request_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _Settlement["default"];
      return this.apiClient.callApi('/payments/settlement_requests/{settlement_request_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get settlement request information
     * This operation retrieves the information of a specific settlement request. 
     * @param {String} settlement_request_id The settlement request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settlement}
     */
  }, {
    key: "getSettlementById",
    value: function getSettlementById(settlement_request_id) {
      return this.getSettlementByIdWithHttpInfo(settlement_request_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get withdrawable balances
     * This operation retrieves the current withdrawable balances of specified merchants or the developer. 
     * @param {Object} opts Optional parameters
     * @param {String} [merchant_ids] A list of merchant IDs to query.
     * @param {String} [currency = 'USD')] The currency for the operation. Currently, only `USD` is supported.
     * @param {module:model/AcquiringType} [acquiring_type] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSettlementInfoByIds200Response} and HTTP response
     */
  }, {
    key: "getSettlementInfoByIdsWithHttpInfo",
    value: function getSettlementInfoByIdsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'merchant_ids': opts['merchant_ids'],
        'currency': opts['currency'],
        'acquiring_type': opts['acquiring_type']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetSettlementInfoByIds200Response["default"];
      return this.apiClient.callApi('/payments/settlement_info', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get withdrawable balances
     * This operation retrieves the current withdrawable balances of specified merchants or the developer. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.merchant_ids A list of merchant IDs to query.
     * @param {String} opts.currency The currency for the operation. Currently, only `USD` is supported. (default to 'USD')
     * @param {module:model/AcquiringType} opts.acquiring_type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSettlementInfoByIds200Response}
     */
  }, {
    key: "getSettlementInfoByIds",
    value: function getSettlementInfoByIds(opts) {
      return this.getSettlementInfoByIdsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get top-up address
     * This operation retrieves the information of the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     * @param {String} merchant_id The merchant ID.
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} custom_payer_id A unique identifier assigned by the developer to track and identify individual payers in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopUpAddress} and HTTP response
     */
  }, {
    key: "getTopUpAddressWithHttpInfo",
    value: function getTopUpAddressWithHttpInfo(merchant_id, token_id, custom_payer_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling getTopUpAddress");
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getTopUpAddress");
      }
      // verify the required parameter 'custom_payer_id' is set
      if (custom_payer_id === undefined || custom_payer_id === null) {
        throw new Error("Missing the required parameter 'custom_payer_id' when calling getTopUpAddress");
      }
      var pathParams = {};
      var queryParams = {
        'merchant_id': merchant_id,
        'token_id': token_id,
        'custom_payer_id': custom_payer_id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TopUpAddress["default"];
      return this.apiClient.callApi('/payments/topup/address', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get top-up address
     * This operation retrieves the information of the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     * @param {String} merchant_id The merchant ID.
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} custom_payer_id A unique identifier assigned by the developer to track and identify individual payers in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopUpAddress}
     */
  }, {
    key: "getTopUpAddress",
    value: function getTopUpAddress(merchant_id, token_id, custom_payer_id) {
      return this.getTopUpAddressWithHttpInfo(merchant_id, token_id, custom_payer_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all bank accounts
     * This operation retrieves the information of all bank accounts you have registered for payment settlement. Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new bank account. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BankAccount>} and HTTP response
     */
  }, {
    key: "listBankAccountsWithHttpInfo",
    value: function listBankAccountsWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_BankAccount["default"]];
      return this.apiClient.callApi('/payments/bank_accounts', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all bank accounts
     * This operation retrieves the information of all bank accounts you have registered for payment settlement. Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new bank account. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BankAccount>}
     */
  }, {
    key: "listBankAccounts",
    value: function listBankAccounts() {
      return this.listBankAccountsWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List crypto addresses
     * This operation retrieves a list of crypto addresses registered for crypto withdrawal.   Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new crypto address. 
     * @param {Object} opts Optional parameters
     * @param {String} [token_id] The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CryptoAddress>} and HTTP response
     */
  }, {
    key: "listCryptoAddressesWithHttpInfo",
    value: function listCryptoAddressesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'token_id': opts['token_id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_CryptoAddress["default"]];
      return this.apiClient.callApi('/payments/crypto_addresses', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List crypto addresses
     * This operation retrieves a list of crypto addresses registered for crypto withdrawal.   Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new crypto address. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CryptoAddress>}
     */
  }, {
    key: "listCryptoAddresses",
    value: function listCryptoAddresses(opts) {
      return this.listCryptoAddressesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List force sweep requests
     * This operation retrieves the information of force_sweep requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [request_id] The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListForcedSweepRequests200Response} and HTTP response
     */
  }, {
    key: "listForcedSweepRequestsWithHttpInfo",
    value: function listForcedSweepRequestsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'request_id': opts['request_id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListForcedSweepRequests200Response["default"];
      return this.apiClient.callApi('/payments/force_sweep_requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List force sweep requests
     * This operation retrieves the information of force_sweep requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.request_id The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListForcedSweepRequests200Response}
     */
  }, {
    key: "listForcedSweepRequests",
    value: function listForcedSweepRequests(opts) {
      return this.listForcedSweepRequestsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all merchants
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [keyword] A search term used for fuzzy matching of merchant names.
     * @param {String} [wallet_id] The wallet ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMerchants200Response} and HTTP response
     */
  }, {
    key: "listMerchantsWithHttpInfo",
    value: function listMerchantsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'keyword': opts['keyword'],
        'wallet_id': opts['wallet_id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListMerchants200Response["default"];
      return this.apiClient.callApi('/payments/merchants', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all merchants
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.keyword A search term used for fuzzy matching of merchant names.
     * @param {String} opts.wallet_id The wallet ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMerchants200Response}
     */
  }, {
    key: "listMerchants",
    value: function listMerchants(opts) {
      return this.listMerchantsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all pay-in orders
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [psp_order_id] A unique reference code assigned by the developer to identify this order in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPaymentOrders200Response} and HTTP response
     */
  }, {
    key: "listPaymentOrdersWithHttpInfo",
    value: function listPaymentOrdersWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'psp_order_id': opts['psp_order_id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListPaymentOrders200Response["default"];
      return this.apiClient.callApi('/payments/orders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all pay-in orders
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.psp_order_id A unique reference code assigned by the developer to identify this order in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPaymentOrders200Response}
     */
  }, {
    key: "listPaymentOrders",
    value: function listPaymentOrders(opts) {
      return this.listPaymentOrdersWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all supported tokens
     * This operation retrieves the information of all supported tokens. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SupportedToken>} and HTTP response
     */
  }, {
    key: "listPaymentSupportedTokensWithHttpInfo",
    value: function listPaymentSupportedTokensWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_SupportedToken["default"]];
      return this.apiClient.callApi('/payments/supported_tokens', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all supported tokens
     * This operation retrieves the information of all supported tokens. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SupportedToken>}
     */
  }, {
    key: "listPaymentSupportedTokens",
    value: function listPaymentSupportedTokens() {
      return this.listPaymentSupportedTokensWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List all settlement requests
     * This operation retrieves the information of all settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [request_id] The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSettlementRequests200Response} and HTTP response
     */
  }, {
    key: "listSettlementRequestsWithHttpInfo",
    value: function listSettlementRequestsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'request_id': opts['request_id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListSettlementRequests200Response["default"];
      return this.apiClient.callApi('/payments/settlement_requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List all settlement requests
     * This operation retrieves the information of all settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.request_id The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSettlementRequests200Response}
     */
  }, {
    key: "listSettlementRequests",
    value: function listSettlementRequests(opts) {
      return this.listSettlementRequestsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List payers
     * This operation retrieves the information of all payers under a merchant.   You can filter the result by the payer ID. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [payer_id] A unique identifier assigned by Cobo to track and identify individual payers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTopUpPayers200Response} and HTTP response
     */
  }, {
    key: "listTopUpPayersWithHttpInfo",
    value: function listTopUpPayersWithHttpInfo(merchant_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling listTopUpPayers");
      }
      var pathParams = {};
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': merchant_id,
        'payer_id': opts['payer_id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListTopUpPayers200Response["default"];
      return this.apiClient.callApi('/payments/topup/payers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List payers
     * This operation retrieves the information of all payers under a merchant.   You can filter the result by the payer ID. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.payer_id A unique identifier assigned by Cobo to track and identify individual payers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTopUpPayers200Response}
     */
  }, {
    key: "listTopUpPayers",
    value: function listTopUpPayers(merchant_id, opts) {
      return this.listTopUpPayersWithHttpInfo(merchant_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update merchant
     * This operation updates the information of an existing merchant. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMerchantByIdRequest} [UpdateMerchantByIdRequest] The request body to update a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Merchant} and HTTP response
     */
  }, {
    key: "updateMerchantByIdWithHttpInfo",
    value: function updateMerchantByIdWithHttpInfo(merchant_id, opts) {
      opts = opts || {};
      var postBody = opts['UpdateMerchantByIdRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling updateMerchantById");
      }
      var pathParams = {
        'merchant_id': merchant_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Merchant["default"];
      return this.apiClient.callApi('/payments/merchants/{merchant_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update merchant
     * This operation updates the information of an existing merchant. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMerchantByIdRequest} opts.UpdateMerchantByIdRequest The request body to update a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Merchant}
     */
  }, {
    key: "updateMerchantById",
    value: function updateMerchantById(merchant_id, opts) {
      return this.updateMerchantByIdWithHttpInfo(merchant_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update pay-in order
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     * @param {String} order_id The pay-in order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaymentOrderRequest} [UpdatePaymentOrderRequest] The request body to update a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
  }, {
    key: "updatePaymentOrderWithHttpInfo",
    value: function updatePaymentOrderWithHttpInfo(order_id, opts) {
      opts = opts || {};
      var postBody = opts['UpdatePaymentOrderRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling updatePaymentOrder");
      }
      var pathParams = {
        'order_id': order_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Order["default"];
      return this.apiClient.callApi('/payments/orders/{order_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update pay-in order
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     * @param {String} order_id The pay-in order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaymentOrderRequest} opts.UpdatePaymentOrderRequest The request body to update a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
  }, {
    key: "updatePaymentOrder",
    value: function updatePaymentOrder(order_id, opts) {
      return this.updatePaymentOrderWithHttpInfo(order_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update refund order information
     * This operation updates a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRefundByIdRequest} [UpdateRefundByIdRequest] The request body to update a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
  }, {
    key: "updateRefundByIdWithHttpInfo",
    value: function updateRefundByIdWithHttpInfo(refund_id, opts) {
      opts = opts || {};
      var postBody = opts['UpdateRefundByIdRequest'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling updateRefundById");
      }
      var pathParams = {
        'refund_id': refund_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Refund["default"];
      return this.apiClient.callApi('/payments/refunds/{refund_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update refund order information
     * This operation updates a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRefundByIdRequest} opts.UpdateRefundByIdRequest The request body to update a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
  }, {
    key: "updateRefundById",
    value: function updateRefundById(refund_id, opts) {
      return this.updateRefundByIdWithHttpInfo(refund_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update top-up address
     * Update the top-up address for a payer under a specific merchant and token. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopUpAddress} [UpdateTopUpAddress] The request body to update top up address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopUpAddress} and HTTP response
     */
  }, {
    key: "updateTopUpAddressWithHttpInfo",
    value: function updateTopUpAddressWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['UpdateTopUpAddress'];
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TopUpAddress["default"];
      return this.apiClient.callApi('/payments/topup/address', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update top-up address
     * Update the top-up address for a payer under a specific merchant and token. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopUpAddress} opts.UpdateTopUpAddress The request body to update top up address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopUpAddress}
     */
  }, {
    key: "updateTopUpAddress",
    value: function updateTopUpAddress(opts) {
      return this.updateTopUpAddressWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();