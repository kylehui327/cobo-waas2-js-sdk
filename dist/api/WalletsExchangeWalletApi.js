"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ChainInfo = _interopRequireDefault(require("../model/ChainInfo"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _ExchangeId = _interopRequireDefault(require("../model/ExchangeId"));
var _ListAssetBalancesForExchangeWallet200Response = _interopRequireDefault(require("../model/ListAssetBalancesForExchangeWallet200Response"));
var _ListExchanges200ResponseInner = _interopRequireDefault(require("../model/ListExchanges200ResponseInner"));
var _ListSupportedAssetsForExchange200Response = _interopRequireDefault(require("../model/ListSupportedAssetsForExchange200Response"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* WalletsExchangeWallet service.
* @module api/WalletsExchangeWalletApi
*/
var WalletsExchangeWalletApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new WalletsExchangeWalletApi. 
  * @alias module:api/WalletsExchangeWalletApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function WalletsExchangeWalletApi(apiClient) {
    _classCallCheck(this, WalletsExchangeWalletApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * List asset balances
   * This operation retrieves the asset balances in a specified Exchange Wallet. You can filter the results by trading account type or asset ID. 
   * @param {String} wallet_id The wallet ID.
   * @param {Object} opts Optional parameters
   * @param {String} [trading_account_types] A list of trading account types, separated by comma. You can get the the supported trading account types of an exchange by calling [List supported exchanges](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-exchanges).
   * @param {String} [asset_ids] (This concept applies to Exchange Wallets only) A list of asset IDs, separated by comma. An asset ID is the unique identifier of the asset held within your linked exchange account.
   * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
   * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
   * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAssetBalancesForExchangeWallet200Response} and HTTP response
   */
  return _createClass(WalletsExchangeWalletApi, [{
    key: "listAssetBalancesForExchangeWalletWithHttpInfo",
    value: function listAssetBalancesForExchangeWalletWithHttpInfo(wallet_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'wallet_id' is set
      if (wallet_id === undefined || wallet_id === null) {
        throw new Error("Missing the required parameter 'wallet_id' when calling listAssetBalancesForExchangeWallet");
      }
      var pathParams = {
        'wallet_id': wallet_id
      };
      var queryParams = {
        'trading_account_types': opts['trading_account_types'],
        'asset_ids': opts['asset_ids'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2', 'CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListAssetBalancesForExchangeWallet200Response["default"];
      return this.apiClient.callApi('/wallets/{wallet_id}/exchanges/assets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List asset balances
     * This operation retrieves the asset balances in a specified Exchange Wallet. You can filter the results by trading account type or asset ID. 
     * @param {String} wallet_id The wallet ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.trading_account_types A list of trading account types, separated by comma. You can get the the supported trading account types of an exchange by calling [List supported exchanges](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-exchanges).
     * @param {String} opts.asset_ids (This concept applies to Exchange Wallets only) A list of asset IDs, separated by comma. An asset ID is the unique identifier of the asset held within your linked exchange account.
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAssetBalancesForExchangeWallet200Response}
     */
  }, {
    key: "listAssetBalancesForExchangeWallet",
    value: function listAssetBalancesForExchangeWallet(wallet_id, opts) {
      return this.listAssetBalancesForExchangeWalletWithHttpInfo(wallet_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List supported exchanges
     * This operation retrieves the information about the exchanges supported by Cobo's Exchange Wallets, including exchange IDs and trading account types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ListExchanges200ResponseInner>} and HTTP response
     */
  }, {
    key: "listExchangesWithHttpInfo",
    value: function listExchangesWithHttpInfo() {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ListExchanges200ResponseInner["default"]];
      return this.apiClient.callApi('/wallets/exchanges', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List supported exchanges
     * This operation retrieves the information about the exchanges supported by Cobo's Exchange Wallets, including exchange IDs and trading account types.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ListExchanges200ResponseInner>}
     */
  }, {
    key: "listExchanges",
    value: function listExchanges() {
      return this.listExchangesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List supported assets
     * This operation retrieves all the assets supported by a specified exchange.
     * @param {module:model/ExchangeId} exchange_id The ID of the exchange. Possible values include:   - `binance`: Binance.   - `okx`: OKX.   - `deribit`: Deribit.   - `bybit`: Bybit.   - `gate`: Gate.io   - `bitget`: Bitget   - `bitmart`: BitMart   - `bitfinex`: Bitfinex 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSupportedAssetsForExchange200Response} and HTTP response
     */
  }, {
    key: "listSupportedAssetsForExchangeWithHttpInfo",
    value: function listSupportedAssetsForExchangeWithHttpInfo(exchange_id, opts) {
      opts = opts || {};
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'exchange_id' is set
      if (exchange_id === undefined || exchange_id === null) {
        throw new Error("Missing the required parameter 'exchange_id' when calling listSupportedAssetsForExchange");
      }
      var pathParams = {
        'exchange_id': exchange_id
      };
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListSupportedAssetsForExchange200Response["default"];
      return this.apiClient.callApi('/wallets/exchanges/{exchange_id}/assets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List supported assets
     * This operation retrieves all the assets supported by a specified exchange.
     * @param {module:model/ExchangeId} exchange_id The ID of the exchange. Possible values include:   - `binance`: Binance.   - `okx`: OKX.   - `deribit`: Deribit.   - `bybit`: Bybit.   - `gate`: Gate.io   - `bitget`: Bitget   - `bitmart`: BitMart   - `bitfinex`: Bitfinex 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSupportedAssetsForExchange200Response}
     */
  }, {
    key: "listSupportedAssetsForExchange",
    value: function listSupportedAssetsForExchange(exchange_id, opts) {
      return this.listSupportedAssetsForExchangeWithHttpInfo(exchange_id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List supported chains
     * This operation retrieves all the chains supported by a specified exchange for a given asset.   You can use this operation to confirm whether you can transfer an asset from or to your Exchange Wallet when using a specific chain. 
     * @param {module:model/ExchangeId} exchange_id The ID of the exchange. Possible values include:   - `binance`: Binance.   - `okx`: OKX.   - `deribit`: Deribit.   - `bybit`: Bybit.   - `gate`: Gate.io   - `bitget`: Bitget   - `bitmart`: BitMart   - `bitfinex`: Bitfinex 
     * @param {String} asset_id (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. You can get the ID of the assets supported by an exchanges by calling [List supported assets](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-assets).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ChainInfo>} and HTTP response
     */
  }, {
    key: "listSupportedChainsForExchangeWithHttpInfo",
    value: function listSupportedChainsForExchangeWithHttpInfo(exchange_id, asset_id) {
      var postBody = null;
      if (postBody && postBody.toJSON) {
        postBody = postBody.toJSON();
      }
      // verify the required parameter 'exchange_id' is set
      if (exchange_id === undefined || exchange_id === null) {
        throw new Error("Missing the required parameter 'exchange_id' when calling listSupportedChainsForExchange");
      }
      // verify the required parameter 'asset_id' is set
      if (asset_id === undefined || asset_id === null) {
        throw new Error("Missing the required parameter 'asset_id' when calling listSupportedChainsForExchange");
      }
      var pathParams = {
        'exchange_id': exchange_id,
        'asset_id': asset_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['CoboAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ChainInfo["default"]];
      return this.apiClient.callApi('/wallets/exchanges/{exchange_id}/assets/{asset_id}/chains', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List supported chains
     * This operation retrieves all the chains supported by a specified exchange for a given asset.   You can use this operation to confirm whether you can transfer an asset from or to your Exchange Wallet when using a specific chain. 
     * @param {module:model/ExchangeId} exchange_id The ID of the exchange. Possible values include:   - `binance`: Binance.   - `okx`: OKX.   - `deribit`: Deribit.   - `bybit`: Bybit.   - `gate`: Gate.io   - `bitget`: Bitget   - `bitmart`: BitMart   - `bitfinex`: Bitfinex 
     * @param {String} asset_id (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. You can get the ID of the assets supported by an exchanges by calling [List supported assets](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-assets).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ChainInfo>}
     */
  }, {
    key: "listSupportedChainsForExchange",
    value: function listSupportedChainsForExchange(exchange_id, asset_id) {
      return this.listSupportedChainsForExchangeWithHttpInfo(exchange_id, asset_id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();